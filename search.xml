<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ABE-2EPSR</title>
    <url>/2021/04/10/ABE-2EPSR/</url>
    <content><![CDATA[<h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><p>本文主要介绍CP-ABE的两种具体实现，这个实现是在Waters大佬<sup><a href="ref1">1</a></sup>（你一定不陌生，因为前面谈到FIBE、KP-ABE还有CP-ABE都有他的身影）的论文里的。正如论文的标题描述的那样（An Expressive, Efficient, and Provably Secure Realization），这些实现都将线性秘密共享（LSSS）作为访问结构，进而依赖特定的难题，完成安全性的规约证明。<br><span id="more"></span><br>Waters论文中详细介绍了三种具体方案的构造，但是前两种被学者们“开发”的多，因此在这里着重介绍前两种。第一种基于Decisional q-PBDHE困难假设，第二种基于BDHE假设。<br>无论是哪一种构造，方案的安全模型是和CP-ABE里边的安全模型是一样的。</p>
<h4 id="第一种构造"><a href="#第一种构造" class="headerlink" title="第一种构造"></a>第一种构造</h4><h5 id="Decisional-q-PBDHE-Assumption"><a href="#Decisional-q-PBDHE-Assumption" class="headerlink" title="Decisional q-PBDHE Assumption"></a>Decisional q-PBDHE Assumption</h5><p>判定型q-PBDHE假设描述为：选择一个乘法循环群 $\mathbb{G}_1$，阶数为$p$（$p$的选择依赖于具体方案的安全参数），令$a,s, b_1, …, b_q \in \mathbb{Z}_p$随机选取，$g$为群$\mathbb{G}$的生成元，如果攻击者获得向量$\overrightarrow{y} =$</p>
<script type="math/tex; mode=display">
\begin{align}
g,g^s,g^a,...,g^{a^q},,g^{a^{q+2}},...,g^{a^{2q}} \nonumber \\
\forall_{1\leq j\leq q}  g^{sb_j},g^{a/b_j},...,g^{a^q / b_j},,g^{a^{q+2} / b_j},...,g^{a^{2q} / b_j} \nonumber\\
\forall_{1<\leq j,k\leq q,k\neq j} g^{a \cdot s \cdot b_k / b_j}, ..., g^{a^q \cdot s \cdot b_k / b_j} \nonumber
\end{align}</script><p>那么他分辨$e(g,g)^{a^{q+1}s} \in \mathbb{G}_2$和$ \mathbb{G}_2$上的一个随机元素$R$是困难的。<br>论文中定义攻击者决定$\mathbb{G}_1$上的q-PBDHE困难问题的优势为：</p>
<script type="math/tex; mode=display">
|Pr[\mathcal{B}(\overrightarrow{y},T=e(g,g)^{a^{q+1}s})=0]-Pr[\mathcal{B}(\overrightarrow{y},T=R)=0]|</script><p>注意这个地方定义的优势和前面FIBE以及CP-ABE中的优势不一样，但是描述的本质是一样的。</p>
<h5 id="方案的具体构造"><a href="#方案的具体构造" class="headerlink" title="方案的具体构造"></a>方案的具体构造</h5><h6 id="Setup-U"><a href="#Setup-U" class="headerlink" title="Setup($U$)"></a><strong>Setup($U$)</strong></h6><p>算法输入系统的总属性个数$U$，然后生成系统参数，包括阶数为$p$的乘法循环群$\mathbb{G}_1$，生成元$g$。然后随机生成$U$个与系统属性有关的元素$h_1,…,h_U \in \mathbb{G}_1$，此外，选择两个指数$\alpha ,a \in \mathbb{Z}_p$。<br>系统的公开参数为</p>
<script type="math/tex; mode=display">
PK=(g,e(g,g)^\alpha ,g^a,h_1,...,h_U)</script><p>系统的主密钥为$MSK=g^ \alpha$。</p>
<h6 id="Encrypt-PK-M-rho-M"><a href="#Encrypt-PK-M-rho-M" class="headerlink" title="Encrypt($PK,(M, \rho) ,M$)"></a><strong>Encrypt($PK,(M, \rho) ,M$)</strong></h6><p>加密算法将$PK$和消息$M$作为输入。首先选择一个线性秘密共享方案的访问结构$(M, \rho)$，函数$\rho$将矩阵$M \in \mathbb{Z} ^{l \times n}$的每一行映射到一个属性。<br>首先选择随机向量$\overrightarrow{v} = (s,y_2,…,y_n) \in \mathbb{Z}_p^n$，$y_2,…,y_n$的作用是来分享秘密值$s$。$\forall i \in {1,2,…,l}$，计算$\lambda _i = M_i\overrightarrow{v}$，其中$M_i$ 表示矩阵$M$的第$i$行。此外，随机选择$r_1,…,r_l \in \mathbb{Z}_p$，然后得到密文形式为：</p>
<script type="math/tex; mode=display">
CT=((M, \rho),Me(g,g)^{\alpha s},C ^\prime = g^s,\forall i \in [l]:C_i=g^{a\lambda _i}h_{\rho(i)}^{-r_i},C_i^\prime = g^{r_i}).</script><h6 id="KeyGen-MSK-S"><a href="#KeyGen-MSK-S" class="headerlink" title="KeyGen($MSK, S$)"></a><strong>KeyGen($MSK, S$)</strong></h6><p>密钥生成算法将主密钥$MSK$和用户的属性集合$S$作为输入。算法随机选择$t \in \mathbb{Z}_p$，然后产生密钥为：</p>
<script type="math/tex; mode=display">
SK=(K=g^\alpha g^{at},L=g^t,\forall x \in S:K_x = h_x^t).</script><h6 id="Decrypt-CT-SK"><a href="#Decrypt-CT-SK" class="headerlink" title="Decrypt($CT,SK$)"></a><strong>Decrypt($CT,SK$)</strong></h6><p>解密算法将密文$CT$和密钥$SK$作为输入。如果密钥$SK$对应的属性集合$S$满足访问结构，则根据LSSS的线性重构的性质，可以得到一组常数$\left \{ \omega _i \in \mathbb{Z}_p \right \}_{i \in I}$，使得$\sum _{i \in I}\omega_i \lambda _i = s$，其中$I \subset  [l]$为$I={i:\rho (i) \in S}$，表示$S$和访问结构的属性交集。然后便可以通过如下方式解密：</p>
<script type="math/tex; mode=display">
\begin{align}
e(C^\prime,K)/( \prod _{i \in I} (e(C_i,L)e(D_i,K_{\rho(i)}))^{\omega _i})= \nonumber\\
e(g,g)^{\alpha s}e(g,g)^{ast}/( \prod _{i \in I} e(g,g)^{ta\lambda _i \omega _i})=e(g,g)^{\alpha s} \nonumber
\end{align}</script><p>进而就能从$C$部件中恢复出明文$M$。</p>
<h4 id="第二种构造"><a href="#第二种构造" class="headerlink" title="第二种构造"></a>第二种构造</h4><h5 id="Decisional-BDHE-Assumption"><a href="#Decisional-BDHE-Assumption" class="headerlink" title="Decisional BDHE Assumption"></a>Decisional BDHE Assumption</h5><p>判定型q-BDHE假设描述为：选择一个乘法循环群 $\mathbb{G}_1$，阶数为$p$（$p$的选择依赖于具体方案的安全参数），令$a,s \in \mathbb{Z}_p$随机选取，$g$为群$\mathbb{G}_1$的生成元，如果攻击者获得向量</p>
<script type="math/tex; mode=display">
\overrightarrow{y} =(g,g^{a^1}, ..., g^{a^q}, , g^{a^{q+2}}, ..., g^{a^{2q}}, g^s)</script><p>那么他分辨$e(g,g)^{a^{q+1}s} \in \mathbb{G}_2$和$ \mathbb{G}_2$上的一个随机元素$R$是困难的。<br>论文中定义攻击者决定$\mathbb{G}_1$上的q-BDHE困难问题的优势为：</p>
<script type="math/tex; mode=display">
|Pr[\mathcal{B}(\overrightarrow{y},T=e(g,g)^{a^{q+1}s})=0]-Pr[\mathcal{B}(\overrightarrow{y},T=R)=0]|</script><h5 id="方案的具体构造-1"><a href="#方案的具体构造-1" class="headerlink" title="方案的具体构造"></a>方案的具体构造</h5><h6 id="Setup-U-1"><a href="#Setup-U-1" class="headerlink" title="Setup($U$)"></a><strong>Setup($U$)</strong></h6><p>算法输入系统的总属性个数$U$，然后生成系统参数，包括阶数为$p$的乘法循环群$\mathbb{G}_1$，生成元$g$。然后随机生成$U$个与系统属性有关的元素$h_1,…,h_U \in \mathbb{G}_1$，此外，选择两个指数$\alpha ,a \in \mathbb{Z}_p$。<br>系统的公开参数为</p>
<script type="math/tex; mode=display">
PK=(g,e(g,g)^\alpha ,g^a,h_1,...,h_U)</script><p>系统的主密钥为$MSK=g^ \alpha$。</p>
<h6 id="Encrypt-PK-M-rho-M-1"><a href="#Encrypt-PK-M-rho-M-1" class="headerlink" title="Encrypt($PK,(M, \rho) ,M$)"></a><strong>Encrypt($PK,(M, \rho) ,M$)</strong></h6><p>加密算法将$PK$和消息$M$作为输入。首先选择一个线性秘密共享方案的访问结构$(M, \rho)$，函数$\rho$将矩阵$M \in \mathbb{Z} ^l \times n$的每一行映射到一个属性。<br>首先选择随机向量$\overrightarrow{v} = (s,y_2,…,y_n) \in \mathbb{Z}_p^n$，$y_2,…,y_n$的作用是来分享秘密值$s$。$\forall i \in {1,2,…,l}$，计算$\lambda _i = M_i\overrightarrow{v}$，其中$M_i$ 表示矩阵$M$的第$i$行。然后得到密文形式为：</p>
<script type="math/tex; mode=display">
CT=((M, \rho),C=Me(g,g)^{\alpha s},C ^\prime = g^s,\forall i \in [l]:C_i=g^{a\lambda _i}h_{\rho(i)}^{-s}).</script><h6 id="KeyGen-MSK-S-1"><a href="#KeyGen-MSK-S-1" class="headerlink" title="KeyGen($MSK, S$)"></a><strong>KeyGen($MSK, S$)</strong></h6><p>密钥生成算法将主密钥$MSK$和用户的属性集合$S$作为输入。算法随机选择$t \in \mathbb{Z}_p$，然后产生密钥为：</p>
<script type="math/tex; mode=display">
SK=(K=g^\alpha g^{at},L=g^t,\forall x \in S:K_x = h_x^t).</script><h6 id="Decrypt-CT-SK-1"><a href="#Decrypt-CT-SK-1" class="headerlink" title="Decrypt($CT,SK$)"></a><strong>Decrypt($CT,SK$)</strong></h6><p>解密算法将密文$CT$和密钥$SK$作为输入。如果密钥$SK$对应的属性集合$S$满足访问结构，则根据LSSS的线性重构的性质，可以得到一组常数$\left \{ \omega _i \in \mathbb{Z}_p \right \}_{i \in I}$，使得$\sum _{i \in I}\omega_i \lambda _i = s$，其中$I \subset  [l]$为$I={i:\rho (i) \in S}$，表示$S$和访问结构的属性交集。然后便可以通过如下方式解密：</p>
<script type="math/tex; mode=display">
\begin{align}
e(C^\prime,K)/( \prod _{i \in I} (e(C_i,L)e(C^ \prime,K_{\rho(i)}))^{\omega _i})= \nonumber \\
e(g,g)^{\alpha s}e(g,g)^{ast}/( \prod _{i \in I} e(g,g)^{ta\lambda _i \omega _i})=e(g,g)^{\alpha s} \nonumber
\end{align}</script><p>进而就能从$C$部件中恢复出明文$M$。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>从以上描述的两种构造方式来看，其访问结构均为线性秘密共享，初一看两个方案的整体差不多。就密文而言，第一种构造对于每个属性有两项，而第二种构造只有一项；就密钥而言，二者产生的是一样的。两种构造最大的差别就是基于的难题形式不同（本质上都是离散对数难题，Diffie-Hellman难题只是很多的变种）。由于第一种构造基于q-PBDHE假设，比较复杂，第二种构造基于q-BDHE，相对简单。这两种方案的构造为后面的ABE的构造带来启示，许多ABE方案都是在这两种方案上拓展的。此外，这两个方案还是仅仅针对基本的四个过程，后面的ABE方案会关注属性撤销、多个权威机构、防止共谋攻击等安全需求。ABE方案的设计能兼顾更多地安全需求自然是更好地，更符合现实场景，进而更实用。<br><span name="ref1" >B. Waters, “Ciphertext-policy attribute-based encryption: An expressive, efficient, and provably secure realization,” in <em>Proc. PKC’11</em>, 2011, pp. 53–70, Springer.</span></p>
]]></content>
      <categories>
        <category>属性基加密</category>
      </categories>
      <tags>
        <tag>属性基加密</tag>
        <tag>访问结构</tag>
      </tags>
  </entry>
  <entry>
    <title>密文策略属性基加密</title>
    <url>/2021/04/09/%E5%AF%86%E6%96%87%E7%AD%96%E7%95%A5%E5%B1%9E%E6%80%A7%E5%9F%BA%E5%8A%A0%E5%AF%86/</url>
    <content><![CDATA[<h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><p>千呼万唤，在前面的一些知识的铺垫中，终于引来了我们的主角：属性基加密（ABE）。都知道属性基加密的思想是让密文和密钥与属性集合和访问结构产生关联，当且仅当属性集合满足访问结构的时候，方能解密成功。那么根据这其中两两的对应关系，又可以将属性基加密分为两类，即密钥策略属性基加密<sup><a href="ref1">1</a></sup>（KP-ABE）和密文策略属性基加密<sup><a href="ref2">2</a></sup>（CP-ABE）。<br><span id="more"></span></p>
<ul>
<li><strong>KP-ABE:</strong> 用户的密钥中蕴含访问结构（访问策略），密文中对应着一系列属性集合，当且仅当密文的属性集合满足用户密钥的访问结构时，用户才能解密成功。细想下来，用户是主体，只有特定的密文才能与之匹配，从而解密。</li>
<li><strong>CP-ABE:</strong> 用户的密钥对应着一系列属性的集合，密文中蕴含着访问结构（策略），当且仅当用户的属性集合满足密文的访问结构时，用户才能解密成功。细想下来，密文是主体，只有特定的密钥才能与之匹配，从而解密。</li>
</ul>
<p>二者对比可以发现，CP-ABE中数据拥有者（加密明文得到密文的人）可以根据自己的需求，定义合适的访问结构，让他所期待的一群用户能够解密，这正好适合构建云环境或者雾环境中数据的安全共享方案，描述的是一对多、多对多的数据共享场景。因此下面着重介绍CP-ABE（后面的文章也都是CP-ABE方案）。</p>
<h4 id="安全模型"><a href="#安全模型" class="headerlink" title="安全模型"></a>安全模型</h4><p><strong>Setup</strong> 挑战者运行Setup算法，将系统的公共参数$PK$给攻击者。</p>
<p><strong>Phase 1</strong>攻击者对一系列的属性集合$S_1,S_2,…,S_{q_1}$进行密钥问询。</p>
<p><strong>Challenge</strong>攻击者提交两个等长的明文$M_0$和$M_1$，此外，攻击者提交一个他希望挑战的访问结构$\mathbb{A}^+$，其中要求Phase 1阶段问询的属性集合$S_1,S_2,…,S_{q_1}$都不满足访问结构$\mathbb{A}^+$。挑战者抛掷一枚硬币$b \in \left \{ 0,1 \right \}$，然后用$\mathbb{A}^+$加密$M_b$。最后，挑战者将密文$CT^+$交给攻击者。</p>
<p><strong>Phase 2 </strong> Phase 1阶段重复，但是问询的属性集合$S_{q_1+1},…,S_q$还是不能满足访问结构$\mathbb{A}^+$。</p>
<p><strong>Guess</strong> 攻击者给出$b$的猜想$b^\prime$。</p>
<p>定义上述交互游戏中攻击者的优势为$Pr\left [ {b}’-b \right ]=\frac{1}{2}$。</p>
<p>上述的攻击者和挑战者的游戏在模糊身份基加密中有所介绍，但是不同的是：模糊身份基加密中是选择身份模型（selective-ID），而属性基加密中是选择集合模型（selective-set）。而且上述模型有两个地方需要注意：</p>
<ul>
<li>以上模型没有Init阶段（在模糊身份基加密的模型中有init阶段），称之为选择明文攻击下不可区分安全（IND-CPA）。如果在Init阶段攻击者声明想要挑战的访问结构，则称之为选择安全模型。很显然，选择安全模型描述的安全性弱一些。</li>
<li>若是在Phase 1阶段还适应性地查询密文，则称之为适应性选择密文攻击安全模型1（CCA1），若是继续在Phase 2阶段还适应性地查询密文，则称之为适应性选择密文攻击安全模型2（CCA2)。很显然，就安全性而言，IND-CPA、CCA1、CCA2依次增强。</li>
</ul>
<h4 id="FIBE具体构造"><a href="#FIBE具体构造" class="headerlink" title="FIBE具体构造"></a>FIBE具体构造</h4><h5 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a><strong>Setup</strong></h5><p>系统选择双线性群$\mathbb{G}_0$，阶数为$p$，生成元为$g$。然后随机选择两个指数$\alpha ,\beta \in \mathbb{Z}_p$，系统公开参数为：</p>
<script type="math/tex; mode=display">
PK=\left ( \mathbb{G}_0,g,h=g^\beta ,f=g^{1/\beta },e\left ( g,g \right )^\alpha  \right ).</script><p>主密钥为：$MK=\left ( \beta ,g^\alpha  \right )$。</p>
<h5 id="Encrypt-PK-M-mathcal-T"><a href="#Encrypt-PK-M-mathcal-T" class="headerlink" title="Encrypt($PK,M,\mathcal{T}$)"></a>Encrypt($PK,M,\mathcal{T}$)</h5><p>用访问控制树$\mathcal{T}$对消息$M$进行加密，具体过程如下：</p>
<p>针对树$\mathcal{T}$中的每一个节点$x$（包括联系属性的叶子节点），选择一个与之对应的多项式$q_x$。多项式$q_x$的的最高次数为$d_x=k_x-1$。</p>
<p>多项式的选取遵循由根节点到叶子节点（从上到下）的方式。从根节点$R$开始，选择秘密值$s \in \mathbb{Z}_p$，并设置$q_R \left(0 \right)=s$，然后随机选择其他项的次数。对于其他节点$x$，递归的设置$q_x \left( 0 \right) = q_{p\left(x \right)} \left(index\left(x \right) \right)$，至于$q_x$的其他系数随机选择。</p>
<p>记$Y$为树$\mathcal{T}$的叶子节点的集合，然后密文可以表示为：</p>
<script type="math/tex; mode=display">
CT=\left( \mathcal{T}, \widetilde{C}=Me\left ( g,g \right )^{\alpha s},C=h^s,\forall j \in S:C_y=g^{q_y \left(0 \right )},
C_y^\prime=H \left(att \left(y \right) \right) ^ {q_y \left( 0  \right )} \right).</script><p>其中，$att \left(y \right)$表示的是叶子节点$y$对应的属性，$H \left( \right)$表示将属性映射到$\mathbb{G}_0$。</p>
<h5 id="KeyGen-MK-S"><a href="#KeyGen-MK-S" class="headerlink" title="KeyGen($MK,S$)"></a>KeyGen($MK,S$)</h5><p>给定一个用户的属性集合$S$，输出对应的密钥$SK$，具体如下：</p>
<p>随机选择$r \in \mathbb{Z}_p$，对于$\forall j \in S$， 随机选择$r_j \in \mathbb{Z}_p$，然后计算密钥如下：</p>
<script type="math/tex; mode=display">
SK=\left( D=g^{\left(\alpha +r \right)/\beta}, \forall j \in S: D_j=g^r\cdot H(j)^{r_j}, D_j^\prime=g^{r_j} \right).</script><h5 id="Delegate-SK-widetilde-S"><a href="#Delegate-SK-widetilde-S" class="headerlink" title="Delegate($SK,\widetilde{S}$)"></a>Delegate($SK,\widetilde{S}$)</h5><p>这个算法的作用是给属性比自己少的用户生成密钥（Delegate字面意思为委派，相当于自己得到密钥后，成了一个“小”的密钥产生中心（KGC）），具体过程如下：</p>
<p>给定另一个属性集合$\widetilde{S}$，满足$\widetilde{S} \subseteq S$。由于已经知道了$S$对应的密钥$SK=(D,\forall j \in S: D_j, D_j^\prime)$，则在此基础上随机选择$\widetilde{r} \in \mathbb{Z}_p$，对于$\forall k \in \widetilde{S}$， 随机选择$\widetilde{r}_k \in \mathbb{Z}_p$，产生$\widetilde{S}$对应的密钥如下：</p>
<script type="math/tex; mode=display">
\widetilde{SK}=(\widetilde{D}=Df^{\widetilde{r}},\forall k \in \widetilde{S}:
\widetilde{D}_k=D_kg^{\widetilde{r}}H(k)^{\widetilde{r}_k},\widetilde{D}_k^\prime=D_k^\prime g^{\widetilde{r}_k}).</script><h5 id="Decrypt-CT-SK"><a href="#Decrypt-CT-SK" class="headerlink" title="Decrypt($CT,SK$)"></a>Decrypt($CT,SK$)</h5><p>密文的形式为：</p>
<script type="math/tex; mode=display">
CT=\left( \mathcal{T}, \widetilde{C}=Me\left ( g,g \right )^{\alpha s},C=h^s,\forall j \in S:C_y=g^{q_y \left(0 \right )},C_y^\prime=H \left(att \left(y \right) \right) ^ {q_y \left( 0  \right )} \right).</script><p>密钥的形式为：</p>
<script type="math/tex; mode=display">
SK=\left( D=g^{\left(\alpha +r \right)/\beta}, \forall j \in S: D_j=g^r\cdot H(j)^{r_j}, D_j^\prime=g^{r_j} \right).</script><p>首先定义一个递归的函数$DecryptNode(CT,SK,x)$（由下到上）:</p>
<ul>
<li><p>如果$x$为叶子节点，记$i=att(x)$。</p>
<ul>
<li><p>若$i \in S$（用户拥有属性$i$），则</p>
<script type="math/tex; mode=display">
DecryptNode(CT,SK,x) = \frac{e(D_i, C_x)}{e(D_i^\prime , C_x^ \prime)}= \frac{e(g^r \cdot H(x)^{r_i}, h^{q_x(0)})}{e(g^{r_i} , H(i)^{q_x(0)})} = e(g,g)^{rq_x(0)}.</script></li>
<li><p>若$i \notin S$，则定义$DecryptNode(CT,SK,x) =\perp $。</p>
</li>
</ul>
</li>
<li><p>如果$x$为非叶子节点，则$DecryptNode(CT,SK,x)$的计算规则如下：</p>
<ul>
<li><p>对于$x$节点的所有孩子节点$z$，调用$F_z = DecryptNode(CT,SK,z)$函数，记$F_z \neq \perp $的所有节点的集合为$S^ \prime$，若$|S^ \prime|&lt;k_x$，则$DecryptNode(CT,SK,x) =\perp $。</p>
</li>
<li><p>相反的话，则选取$S^ \prime$集合中任意$k_x$个元素组成集合$S_x$，按如下方式计算$DecryptNode(CT,SK,x)$：</p>
<script type="math/tex; mode=display">
\begin{align}
F_z=\prod _{z \in S_x} F_z ^{\Delta _{i,S_x^ \prime} (0)} \nonumber \\
=\prod _{z \in S_x} (e(g,g) ^ {rq_z(0)}) ^ {\Delta _{i,S_x^ \prime} (0)} \nonumber \\
=\prod _{z \in S_x} (e(g,g) ^ {rq_{p(z)}(index(z))}) ^ {\Delta _{i,S_x^ \prime} (0)} \nonumber \\
=\prod _{z \in S_x} (e(g,g)  ^ {r \cdot q_x(i) \cdot \Delta _{i,S_x^ \prime} (0)} \nonumber \\
=e(g,g)^{rq_x(0)}.\nonumber
\end{align}</script></li>
</ul>
</li>
</ul>
<p>从递归函数的形式上看，尽管叶子节点和非叶子节点的具体计算方式不一样，但是有着统一的形式，因此只要能够依次满足条件地计算出树中适当个数的节点秘密值，就可以解密根节点的秘密值。即当属性集合$S$满足访问结构$\mathcal{T}$，那么就可以解密得到:</p>
<script type="math/tex; mode=display">
A = DecryptNode(CT,SK,r)=e(g,g)^{rq_R(0)} = e(g,g)^{rs}.</script><p>最后即可解密成功：</p>
<script type="math/tex; mode=display">
\widetilde{C}/(e(C,D)/A) = \widetilde{C}/(e(h^s,g^{((\alpha + r)/\beta )})/e(g,g)^{rs}) = M.</script><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>以上便是最初的CP-ABE方案的构造，访问结构由访问控制树的形式给出，方案中除了基本的系统初始化、密钥生成、加密和解密四个步骤外，还有一个密钥“委派”的步骤，这个可能是受分层身份基加密（HIBE)的影响。文中抵抗共谋攻击的方式是靠随机数$r$，对于每一个用户都会有一个不同的$r$，从递归函数$DecryptNode$可以看出每一步计算都有$r$项参与，如果没有足够多的项是无法解密根节点的秘密值，进而无法解密密文，而不同的$r$得到的结果不能进行拉格朗日插值，算出结果。以后的ABE方案侧重于用户撤销、属性撤销、多个属性权威等等安全需求，这些在之后的文章中有介绍。</p>
<p><span name="ref1" >V. Goyal, O. Pandey, A. Sahai, and B. Waters, “Attribute-Based Encryption for Fine-grained Access Control of Encrypted Data,” in <em>Proceedings of the 13th ACM Conference on Computer and Communications Security</em>, Alexandria, Virginia, USA, 2006, pp. 89–98.</span></p>
<p><span name="ref2" >J. Bethencourt, A. Sahai, and B. Waters, “Ciphertext-Policy Attribute-Based Encryption,” in <em>IEEE Symposium on Security &amp; Privacy</em>, Oakland, USA, May 2007, pp. 321–334.</span></p>
]]></content>
      <categories>
        <category>属性基加密</category>
      </categories>
      <tags>
        <tag>属性基加密</tag>
        <tag>访问结构</tag>
      </tags>
  </entry>
  <entry>
    <title>模糊身份基加密</title>
    <url>/2021/04/08/%E6%A8%A1%E7%B3%8A%E8%BA%AB%E4%BB%BD%E5%9F%BA%E5%8A%A0%E5%AF%86/</url>
    <content><![CDATA[<h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><p>属性基加密<sup><a href="ref1">1</a></sup> （ABE）的思想来源于模糊身份基加密<sup><a href="ref2">2</a></sup> （FIBE），那么在深入了解属性基加密之前，我们先来认识一下模糊身份基加密。模糊身份基加密的主要思想是：用户用一系列的属性$\omega $表示，密文用一系列的属性${\omega }’$表示，系统设定一个容忍值$d$，当二者属性的相交个数大于$d$，即$|{\omega }’\cap \omega|\geq d$时，方能解密成功。</p>
<span id="more"></span>
<h4 id="双线性映射"><a href="#双线性映射" class="headerlink" title="双线性映射"></a>双线性映射</h4><p>双线性映射是基于Diffie-Hellman难题构建属性基加密算法的数学基础，此处的模糊身份基加密也用到了该数学基础。</p>
<p>令$\mathbb{G}_1,\mathbb{G}_2$为两个阶为$p$的乘法循环群，$g$为$\mathbb{G}_1$的生成元，一个从$\mathbb{G}_1$到$\mathbb{G}_2$的映射$e:\mathbb{G}_1 \times \mathbb{G}_1\rightarrow  \mathbb{G}_2$是双线性的，当其满足以下三点：</p>
<ul>
<li>双线性：$\forall g, h \in \mathbb{G}_1$和$a,b \in \mathbb{Z}_p$有$e\left ( g^a, h^b \right ) = e\left ( g, h \right )^{ab}$；</li>
<li>非退化性：$e\left ( g, h \right ) \neq 1$；</li>
<li>可计算性：$\forall g, h \in \mathbb{G}_1$，存在有效的算法计算$e\left ( g, h \right ) \in \mathbb{G}_2$。</li>
</ul>
<h4 id="FIBE具体构造"><a href="#FIBE具体构造" class="headerlink" title="FIBE具体构造"></a>FIBE具体构造</h4><h5 id="Set-up"><a href="#Set-up" class="headerlink" title="Set up"></a>Set up</h5><p>首先定义系统的属性空间$U$，为了简单起见，将$\mathbb{Z}_p$中前$|U|$个元素作为属性即整数1,…,$|U|$。然后在$\mathbb{Z}_p$中随机均匀选择$t_1,…,t_{|U|}$。最后在$\mathbb{Z}_p$中随机均匀选择$y$。系统的公共参数表示为：</p>
<script type="math/tex; mode=display">
T_1=g^{t_1},...,g^{t_{|U|}},Y=e\left ( g,g \right )^y.</script><p>系统的主密钥为：</p>
<script type="math/tex; mode=display">
t_1,...t_{|U|},y.</script><h5 id="Key-Generation"><a href="#Key-Generation" class="headerlink" title="Key Generation"></a>Key Generation</h5><p>对于某个用户身份$\omega  \in U$（属性集合），选择一个$d-1$阶多项式$q$，使得$q\left ( 0 \right )=y$。私钥部件为$\left ( D_i \right )_{i \in \omega}$，其中$D_i = g^{\frac{q\left ( i \right )}{t_i}}$。</p>
<h5 id="Encryption"><a href="#Encryption" class="headerlink" title="Encryption"></a>Encryption</h5><p>密文的加密与一系列的属性${\omega}’$有关，将发送的消息映射到$\mathbb{G}_2$上，即$M \in \mathbb{G}_2$。然后随机选择一个$\mathbb{Z}_p$上的秘密值$s$，加密得到的密文形式如下：</p>
<script type="math/tex; mode=display">
E=\left ( {\omega}',{E}'=MY^s,\left \{ E_i =T_i^s\right \}_{i \in {\omega}'} \right ).</script><h5 id="Decryption"><a href="#Decryption" class="headerlink" title="Decryption"></a>Decryption</h5><p>假设用户的属性集合与蕴含在密文中的属性集合相交的属性个数多于$d$，即$|{\omega }’\cap \omega|\geq d$，那么他能按照如下方式成功解密。首先在属性交集${\omega }’\cap \omega$中任意选择$d$个属性集合$S$，然后根据拉格朗日插值算法，可以解密密文：</p>
<script type="math/tex; mode=display">
\begin {align}
{E}'/\prod _{i \in S}\left ( e\left ( D_i,E_i \right ) \right )^{\Delta_{i,S}\left ( 0 \right )} \nonumber \\
=Me\left ( g,g \right )^{sy}/ \prod _{i \in S}\left ( e\left ( g^{\frac{q\left ( i \right )}{t_i}},g^{st_i} \right ) \right )^{\Delta_{i,S}\left ( 0 \right )} \nonumber \\
=Me\left ( g,g \right )^{sy}/ \prod _{i \in S}\left ( e\left ( g,g \right )^{sq\left ( i \right )} \right )^{\Delta_{i,S}\left ( 0 \right )} \nonumber \\
=M \nonumber
\end {align}</script><p>其中$\Delta_{i,S}\left ( 0 \right )$为拉格朗日系数的0值，$\Delta_{i,S}\left ( x \right ) = \prod _{j \in S,j\neq i}\frac{x-j}{i-j}$。</p>
<h4 id="安全性证明"><a href="#安全性证明" class="headerlink" title="安全性证明"></a>安全性证明</h4><p>密码学中构建方案，通常将方案的安全性规约到某个数学困难问题，用反证法的思想，当难题是困难的，那么攻破方案就是困难的。FIBE方案是在选择身份模型下将方案规约到MBDH问题。以下描述模糊选择身份模型（Selective-ID模型，属性基加密中为Selective-Set模型）：</p>
<p><strong>Init</strong> 攻击者声明想要挑战的身份$\alpha $（即一个属性集合）。</p>
<p><strong>Setup</strong> 挑战者运行系统的Setup算法生成系统参数，将公共参数告诉攻击者。</p>
<p><strong>Phase1</strong> 攻击者可以对许多身份$\gamma _j$进行密钥询问，前提是$\forall j$，$|\gamma _j \cap \alpha |&lt;d$。</p>
<p><strong>Challenge</strong>  攻击者提交两个等长的密文$M_0,M_1$，挑战者抛掷一枚硬币$b \in \left \{ 0,1 \right \}$，然后用$\alpha $加密$M_b$。挑战者将密文发送给攻击者。</p>
<p><strong>Phase2</strong> Phase 1过程重复。</p>
<p><strong>Guess</strong> 攻击者给出$b$的猜想${b}’$。</p>
<p>以上游戏中攻击者的优势定义为$Pr\left [ {b}’=b \right ]-\frac{1}{2}$。</p>
<p>以后会发现证明安全性的时候，以上攻击者和挑战者的游戏经常看到。在这里就不细讲证明的过程，后面会专门写一篇文章介绍方案的安全性证明。从FIBE的构造来看，主要运用的数学技巧是双线性映射和拉格朗日插值。这两个数学技巧是构建属性基加密方案的基础，FIBE只是用了一次插值，而前面介绍的访问控制树结构本质上是多次运用拉格朗日插值，然后构造成一个访问结构供方案使用，还有一些分层的FIBE（可以理解为分层的门限属性基加密），也是多次运用拉格朗日插值，比如文献<sup><a href="ref3">3</a></sup> 等。</p>
<p><span name="ref1" >J. Bethencourt, A. Sahai, and B. Waters, “Ciphertext-Policy Attribute-Based Encryption,” in <em>IEEE Symposium on Security &amp; Privacy</em>, Oakland, USA, May 2007, pp. 321–334.</span></p>
<p><span name="ref2" >A. Sahai and B. Waters, “Fuzzy Identity-Based Encryption,” in <em>Proceedings of the 24th annual international conference on Theory and Applications of Cryptographic Techniques</em>, Arahus, Denmark, 2005, pp. 457–473.</span></p>
<p><span name="ref3">M. Chase, “Multi-Authority Attribute Based Encryption,” in <em>Proceedings of 4th Theory of Cryptography Conference on Theory of Cryptography (TCC’07)</em>, 2007, pp. 515-534.</span></p>
]]></content>
      <categories>
        <category>属性基加密</category>
        <category>身份基加密</category>
      </categories>
      <tags>
        <tag>属性基加密</tag>
        <tag>访问结构</tag>
      </tags>
  </entry>
  <entry>
    <title>访问结构</title>
    <url>/2021/04/07/%E8%AE%BF%E9%97%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<p>属性基加密算法（Attribute Based Encryption）是一种特殊的身份及加密算法，身份及加密算法将任何能唯一代表用户身份的信息作为公钥，这样一来大大降低了公钥管理的难度，而属性基加密将用户的身份表示为一系列的属性的集合，当且仅当属性集合满足访问结构时，才能解密成功。<br><span id="more"></span></p>
<p>2005年，A. Sahai和 B. Waters两位大佬提出模糊身份基加密<sup><a href="ref1">1</a></sup> （FIBE）的概念，并在论文的后面引入属性基加密；2006年，J. Bethencourt、 A. Sahai  和 B. Waters这三位大佬首次构建属性基加密方案<sup><a href="ref2">2</a></sup>（确切的来说是密钥策略属性基加密方案，KP-ABE），并在论文后面引入密文策略属性基加密方案；2007年，V. Goyal、 O. Pandey、 A. Sahai 和 B. Waters这四位大佬首次构建密文策略属性基加密方案<sup><a href="ref3">3</a></sup>，从此属性加秘密的研究拉开序幕。</p>
<p>属性集合好理解，也就是将用户用一系列的属性标签表示，那么访问结构到底是什么呢？在描述访问结构之前，首先介绍一下离散对数难题（Discrete Logarithm Problem）、拉格朗日插值算法和单调访问结构（Monotone Access Structure），然后引出属性基加密方案中常用的三种访问结构：与门访问结构（And-Gate），访问控制树（Access Tree）和线性秘密共享（LSSS）。</p>
<h4 id="离散对数难题4"><a href="#离散对数难题4" class="headerlink" title="离散对数难题4"></a>离散对数难题<sup><a href="ref4">4</a></sup></h4><p>令$\alpha \in \mathbb{Z}_{p}$，$G$为一个乘法循环群，群的阶数为$p$，群的一个生成元为$g$，离散对数难题说的是：给定$g,g^a \in G$，对于任何多项式时间的攻击者，其计算出指数$a$的概率是可忽略的，即由$g,g^a \in G$计算出$a$是困难的。</p>
<h4 id="拉格朗日插值算法"><a href="#拉格朗日插值算法" class="headerlink" title="拉格朗日插值算法"></a>拉格朗日插值算法</h4><p>任意给定$k$阶多项式函数，已知给定$k+1$个取值点（互不重复）：$\left ( x_0,y_0 \right ),\left ( x_1,y_1 \right ),…,\left ( x_k,y_k \right )$，其中$i \neq  j$时$x_i \neq  x_j$。可以通过以下插值方式恢复多项式：</p>
<script type="math/tex; mode=display">
L\left ( x \right )=\sum _{j=0}^{k}y_jl_j\left ( x \right )</script><p>其中$l_j\left ( x \right )$为拉格朗日系数：</p>
<script type="math/tex; mode=display">
l_j\left ( x \right )=\prod _{i=0,i\neq j}^k \frac{x-x_i}{x_j-x_i}= \frac{x-x_0}{x_j-x_0}...\frac{x-x_{j-1}}{x_j-x_{j-1}}\cdot \frac{x-x_{j+1}}{x_j-x_{j+1}}...\frac{x-x_k}{x_j-x_k}</script><p>任意多于$k+1$个取值点都能复原多项式。</p>
<h4 id="单调访问结构5"><a href="#单调访问结构5" class="headerlink" title="单调访问结构5"></a>单调访问结构<sup><a href="ref5">5</a></sup></h4><p>令$\left \{ P_1,P_2,…,P_n \right \}$为一系列参与者的集合（属性基加密里边指的是属性），一个集合$ \mathbb{A} \subseteq 2^ { \left  \{ P_1,P_2,…,P_n \right \}} $是单调的，当其满足：$\forall B,C$，如果$B\in \mathbb{A}$且$B\subseteq C$，则$C\in \mathbb{A}$。一个访问结构（单调访问结构）是$\left \{ P_1,P_2,…,P_n \right \}$的幂集的非空子集，即$ \mathbb{A} \subseteq 2^ { \left  \{ P_1,P_2,…,P_n \right \} \setminus \left  \{\varnothing \right \}} $，在$\mathbb{A}$中的集合为授权集合，不在$\mathbb{A}$的集合为非授权集合。</p>
<h4 id="与门访问结构6"><a href="#与门访问结构6" class="headerlink" title="与门访问结构6"></a>与门访问结构<sup><a href="ref6">6</a></sup></h4><p>给定一个属性域$U=\left \{ 1,2,…,n \right \}$，对于该属性域中的每一个属性$\underline{i}\in U$，有三个值可供选择：</p>
<p>$\underline{i}=+i$表示该属性有，$\underline{i}=-i$表示该属性没有，而$\underline{i}=dont care$表示该属性可有可无。访问结构可以表示为与门访问结构$W=\wedge _{i\in I}\underline{i}$，其中$I\subseteq U$表示设置的与访问结构有关的属性集合，因此对于$\underline{i}\in U \setminus I$，其属性都为$\underline{i}=dont care$。</p>
<h4 id="访问控制树2"><a href="#访问控制树2" class="headerlink" title="访问控制树2"></a>访问控制树<sup><a href="ref2">2</a></sup></h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p>让$\mathcal{T}$表示一个访问控制树。树的非叶子节点$x$表示一个门限，记$k_x$为节点$x$的门限值，$num_x$为节点$x$的孩子节点总数，那么自然有$0&lt;k_x&lt;num_x$。当$k_x=1$时，即表示或门，当$k_x=num_x$时，即表示与门。树的叶子节点$x$与一个属性相联系，自然地，此时$k_x=1$。</p>
<p>为了表示的方便，定义一些描述节点的函数。记$p\left ( x \right )$表示节点$x$的父亲节点，$index\left ( x \right )$表示在父亲节点看来该节点的索引值（像完全二叉树一样自左向右编号）。如果$x$是一个叶子节点，$attr\left ( x \right )$表示该节点关联的属性值。</p>
<h5 id="满足一个访问控制树"><a href="#满足一个访问控制树" class="headerlink" title="满足一个访问控制树"></a>满足一个访问控制树</h5><p>让$\mathcal{T}$表示一个访问控制树，根节点为$r$。记$\mathcal{T}_x$为根节点为$x$的$\mathcal{T}$（$\mathcal{T}$就可以表示为$\mathcal{T}_r$）的子树。如果属性集合$\gamma$满足访问控制树$\mathcal{T}_x$，则$\mathcal{T}_x\left ( \gamma \right )=1$。$\mathcal{T}_x\left ( \gamma \right )$按如下的方式递归计算：如果$x$为非叶子节点，则计算$x$节点的所有孩子节点${x}’$的$\mathcal{T}_{x}’\left ( \gamma \right )$的值，$\mathcal{T}_x\left ( \gamma \right )=1$当且仅当至少$k_x$个$\mathcal{T}_{x}’\left ( \gamma \right )$返回1。如果$x$为叶子节点，则$\mathcal{T}_x\left ( \gamma \right )=1$当且仅当$attr\left ( x \right ) \in \gamma$。</p>
<h5 id="访问控制树的定义"><a href="#访问控制树的定义" class="headerlink" title="访问控制树的定义"></a>访问控制树的定义</h5><p>对于每一个树中的节点$x$，选择与之对应的多项式$q_x$，多项式的选择遵循自上而下的方式（从根节点到叶子节点），具体如下：</p>
<ul>
<li>对于树中的节点$x$，将多项式$q_x$的最高次数设置为$d_x=k_x-1$，也即该节点门限值减一；</li>
<li>对于根节点$r$，设置$q_r\left ( 0 \right )=y$ ，至于$q_r$的其他系数随机选择；</li>
<li>对于树中的节点$x$，设置$q_x\left ( 0 \right )=q_{p\left(x\right)}\left ( index\left(x\right) \right )$ ，至于$q_x$的其他系数随机选择；</li>
<li>构造属性基加密算法的时候，将叶子节点$z$的值$q_z\left ( 0 \right )$作为属性密钥的有关部件，这样通过拉格朗日插值算法就可以恢复出秘密值（与$y$有关的值）。</li>
</ul>
<h4 id="线性秘密共享5"><a href="#线性秘密共享5" class="headerlink" title="线性秘密共享5"></a>线性秘密共享<sup><a href="ref5">5</a></sup></h4><p>令$\mathbb{P}=\left \{ P_1,P_2,…,P_n \right \}$为一系列参与者的集合，$\mathbb{P}$上的一个秘密共享方案$\prod $是线性的，当且仅当满足如下两个条件：</p>
<ul>
<li>每个参与者关于秘密值$s$的份额构成$\mathbb{Z}_{p}$上的一给向量；</li>
<li>存在一个秘密共享方案$\prod $的分享生成矩阵$M \in \mathbb{Z}_{p} ^ {l \times \theta}$，函数$\rho \left ( i \right )$将矩阵的第$i$行映射到一个$U$上的属性，即$\rho \left ( i \right ) \in U, \forall i \in \left [ l \right ]$。给定一个列向量$\overrightarrow{v}=\left ( s,r_2,…,r_{\theta} \right )$，其中$s \in \mathbb{Z}_{p}$是需要共享的秘密值，$r_2,…,r_{\theta}$在$\mathbb{Z}_{p}$上随机选取。$M\overrightarrow{v}$向量是根据秘密共享方案$\prod $的$l$份份额，第$i$份份额$\delta _i = \left ( Mv \right )_i$是属于属性$\rho \left ( i \right )$，即为$M$和$\overrightarrow{v}$的内积。</li>
</ul>
<p>线性秘密共享方案具有线性重构的特性。假设一个线性秘密共享方案$\prod $代表一个访问结构，令$A \in \mathbb{A} $表示一个授权的属性集合，索引集合$I \subset  \left \{ 1,…,l \right \}$定义为$I=\left \{ i:\rho \left ( i \right ) \in A \right \}$。根据线性重构的性质，则存在一系列常数的集合$\left \{ \omega_i \in \mathbb{Z}_p  \right \}_{i \in I}$，使得$s=\sum _{i \in I} \omega _i\delta _i$。而且这些常数能在多项式时间内找到。对于任何非授权的集合，找不到满足条件的一组常数。</p>
<h4 id="三种访问结构对比"><a href="#三种访问结构对比" class="headerlink" title="三种访问结构对比"></a>三种访问结构对比</h4><p>从访问结构的表达力上说，与门访问结构是比较差的，因为其是属性的与的关系，所以匹配的条件比较严格，由最初的二值属性（有或者没有）在一定程度上拓展了其表达力。访问控制树和线性秘密共享方案是可以等价的，描述的都是单调的访问结构（单调访问结构直观上理解就是，a的属性集合满足访问结构，而a有的属性b都有，那么b的属性集合必然也满足访问结构），能支持与门、或门以及其他门限，因此表达力强一些。文献<sup><a href="ref7">7</a></sup> 描述了由访问控制树如何转化为线性秘密共享的生成矩阵（只含有0,1和-1）。</p>
<p><span name="ref1" >A. Sahai and B. Waters, “Fuzzy Identity-Based Encryption,” in <em>Proceedings of the 24th annual international conference on Theory and Applications of Cryptographic Techniques</em>, Arahus, Denmark, 2005, pp. 457–473.</span></p>
<p><span name="ref2" >J. Bethencourt, A. Sahai, and B. Waters, “Ciphertext-Policy Attribute-Based Encryption,” in <em>IEEE Symposium on Security &amp; Privacy</em>, Oakland, USA, May 2007, pp. 321–334.</span></p>
<p><span name="ref3" >V. Goyal, O. Pandey, A. Sahai, and B. Waters, “Attribute-Based Encryption for Fine-grained Access Control of Encrypted Data,” in <em>Proceedings of the 13th ACM Conference on Computer and Communications Security</em>, Alexandria, Virginia, USA, 2006, pp. 89–98.</span></p>
<p><span name="ref4" >H. H. Krawczyk, “A high-performance secure Diffie–Hellman protocol,” in <em>Advances in Cryptology</em>. Berlin, Germany: Springer, 2005, pp. 1–62.</span></p>
<p><span name="ref5" >A. Beimel, “Secure Schemes for Secret Sharing and Key Distribution,”PhD thesis, Israel Institute of Technology, Technion, Haifa, Israel, 1996.</span></p>
<p><span name="ref6" >L. Cheung and C. Newport, “Provably Secure Ciphertext Policy ABE,” in <em>Proceedings of ACM Conference on Computer and Commmunications Security</em>, pp. 456-465, 2007.</span></p>
<p><span name="ref7" >S. Ruj, A. Nayak and I. Stojmenovic, “DACC: Distributed Access Control in Clouds,” in <em>2011IEEE 10th International Conference on Trust, Security and Privacy in Computing and Communications</em>, Changsha, 2011, pp. 91-98.</span></p>
]]></content>
      <categories>
        <category>属性基加密</category>
      </categories>
      <tags>
        <tag>属性基加密</tag>
        <tag>访问结构</tag>
      </tags>
  </entry>
  <entry>
    <title>雾计算与属性基加密</title>
    <url>/2021/04/05/%E9%9B%BE%E8%AE%A1%E7%AE%97%E4%B8%8E%E5%B1%9E%E6%80%A7%E5%9F%BA%E5%8A%A0%E5%AF%86/</url>
    <content><![CDATA[<h4 id="雾计算的概念"><a href="#雾计算的概念" class="headerlink" title="雾计算的概念"></a>雾计算的概念</h4><p>雾计算与云计算相对，是其在边缘网络上的拓展。</p>
<h4 id="云计算与雾计算的对比"><a href="#云计算与雾计算的对比" class="headerlink" title="云计算与雾计算的对比"></a>云计算与雾计算的对比</h4><p>云计算可以资源共享、弹性资源租用、按需购买，拥有海量存储和丰富的计算能力。由于其部署在互联网的中心，因此离日常中的终端（比如用户手机、智能穿戴设备等）较远，因此形象地称之为云计算（云高高在上，离地面较远）。<br><span id="more"></span><br>云计算虽能提供优质的计算、存储等服务，但网络边缘的数据传到云存储中心的链路通常很长，并且同一时间内用户数据传输很多需要很大的网络带宽。云服务器与终端较远会导致网络时延，因而不能满足实时性要求很高的应用场景。另外，云服务器是在网络中心，并不能感知传输到它的数据来源的地理分布，而且不支持移动性。</p>
<h4 id="雾计算的特点"><a href="#雾计算的特点" class="headerlink" title="雾计算的特点"></a>雾计算的特点</h4><p>针对上面的缺陷，雾计算便被提出。与云计算相比，雾计算有以下特点：</p>
<ul>
<li>位置感知、低延时。雾计算框架中的雾节点往往分布在边缘位置，能感知其所在范围内设备的位置，而且雾节点与终端设备的通信时延相比设备与云服务器的时延大大缩减，因而可以支持延时需求高的应用场景。</li>
<li>广泛地理分布。与中心化的云形成鲜明的对比，雾节点会根据连接网络中各个终端设备的地理分布，相应地广泛分布。</li>
<li>大规模终端节点。接入网络的终端设备除了像用户手机之类的智能设备外，还有各种各样的传感器，监测湿度、温度等多种物理量，这些设备呈现出低存储、低计算能力的特点，构成分布式的系统。由此整个网络中节点的规模空前巨大。</li>
<li>实时交互和无线接入。终端和雾节点的通信延时极低确保能实时交互，这能满足时延要求高的应用场景，比如自动驾驶等。终端和雾节点之间通过无线连接。</li>
<li>异质性和互操作性。雾节点可以以不同的形式呈现，应用于不同的环境。来自于终端的信息往往需要整合处理，因此需要跨域操作，节点间需要合作。</li>
<li>在线分析和云雾协作。雾节点能对来自终端的数据进行在线分析，并且可以和云数据中心进行交互。</li>
</ul>
<h4 id="云计算的应用场景"><a href="#云计算的应用场景" class="headerlink" title="云计算的应用场景"></a>云计算的应用场景</h4><ul>
<li>车联网。智能交通灯等智能设备监测交通实时状况，实现车辆与车辆、车辆与接入点、接入点与接入点之间的实时交互。</li>
<li>智能电网。在智能电网中，能量负载均衡应用可以在网络边缘设备上运行，基于能量需求，可用性和最低价格等因素可以自动地切换到像太阳能、风能 等可选择的能源。网络边缘的雾收集器处理智能传感器和设备生成的数据，并且向制动器发出控制命令。它们还要过滤在本地处理的数据，并将剩余的数据发送到更高层，用于可视化和实时事务分析的报告。</li>
<li>无线传感器和致动网络。雾设备制动器（雾计算服务器）可以通过创建闭环系统来控制系统，并且测量过程的稳定性和振荡行为。以此来弥补传统传感器需要额外施加物理动作实现相应功能打开。关闭等要求。</li>
<li>智能家居。各类传感器实时监测环境中的物理量，收集的数据交由雾节点协作处理，从而传递给系统进行智能决策。雾节点之间也可以协作，为更高级别的决策生成依据。</li>
</ul>
<h4 id="雾计算网络框架"><a href="#雾计算网络框架" class="headerlink" title="雾计算网络框架"></a>雾计算网络框架</h4><p>雾计算的网络框架是三层框架，第一层是智能终端层，该层可以是移动手机、各类传感器等，特点是存储。计算资源受限；第二层是雾计算节点层，该层具有适度的计算和存储资源；第三层是云数据中心，这一层具有海量存储和超强的计算能力。三层的位置关系为：第一层和第二层靠的近，第三层与第二层靠的很远。</p>
<h4 id="雾计算中的研究问题"><a href="#雾计算中的研究问题" class="headerlink" title="雾计算中的研究问题"></a>雾计算中的研究问题</h4><ul>
<li>计算卸载。计算卸载可以克服移动设备上的资源限制，因为一些计算密集型任务就应用的性 能而言可以从卸载中获益，从而节省计算资源和电池寿命。计算卸载考虑的是终端的计算资源受限，可以将复杂的计算卸载到雾节点服务器以及云服务器，但是如何运用好的卸载策略需要考虑计算能量、计算代价以及计算时延等。</li>
<li>边缘缓存。边缘缓存指的是将需要频繁访问的网络内容放在离用户较近、访问速度较快的 边缘网络设备中（也即雾设备）。边缘缓存技术的提出明显缓解了用户频繁请求云服务中心获取文件的压力。边缘缓存通常包含两个紧密相关的问题：缓存文件位置和缓存文件传递。文件缓存位置问题包括决定每一个缓存的位置和大小，选择数据库中的某一个文件放在某一个雾节点，并且如何下载文件到雾节点。缓存文件传递问题是如何发送文件给请求该文件的用户。边缘缓存考虑的是终端的存储资源受限，制定合理的边缘缓存策略使得终端可以迅速下载雾中数据，便于数据后续处理。</li>
</ul>
<h4 id="雾计算与属性基加密的关系"><a href="#雾计算与属性基加密的关系" class="headerlink" title="雾计算与属性基加密的关系"></a>雾计算与属性基加密的关系</h4><p>智能设备由于其存储和计算资源的局限性，总会想方设法解决对自己所有（或者所产生）数据的存储计算问题，并且希望访问控制的主动权掌握在自己手里。自然想到的解决办法是将将数据外包。和云计算类似，只不过雾计算在框架上增加了一个层次，即在网络的边缘增加大量的雾节点。云计算中，属性基加密方法是一个有前途的密码方案，可以提供细粒度的访问控制，终端自定义访问结构，终端将数据加密上传到云存储，其他用户只要满足访问结构便可以从云上下载并解密密文。在雾计算中，数据外包同样可以运用属性基加密的方式，提供细粒度的访问控制。只不过在雾计算中，终端设备可以将数据上传到雾节点或者云服务器，雾节点和云服务器可以进行服务上的交互。上传到雾中的数据可以直接被雾覆盖的其他终端或者用户所下载，相当于一个局部的概念；而上传到云中的数据可以被所有网络中的用户或者终端下载，相当于一个全局的概念。属性基加密运用到云计算上解决的问题，同样可以运用到雾计算中。</p>
]]></content>
      <categories>
        <category>属性基加密</category>
      </categories>
      <tags>
        <tag>属性基加密</tag>
        <tag>雾计算</tag>
      </tags>
  </entry>
</search>
