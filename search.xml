<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ABE-2EPSR</title>
    <url>/2021/04/10/ABE-2EPSR/</url>
    <content><![CDATA[<h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><p>本文主要介绍CP-ABE的两种具体实现，这个实现是在Waters大佬<sup><a href="ref1">1</a></sup>（你一定不陌生，因为前面谈到FIBE、KP-ABE还有CP-ABE都有他的身影）的论文里的。正如论文的标题描述的那样（An Expressive, Efficient, and Provably Secure Realization），这些实现都将线性秘密共享（LSSS）作为访问结构，进而依赖特定的难题，完成安全性的规约证明。<br><span id="more"></span><br>Waters论文中详细介绍了三种具体方案的构造，但是前两种被学者们“开发”的多，因此在这里着重介绍前两种。第一种基于Decisional q-PBDHE困难假设，第二种基于BDHE假设。无论是哪一种构造，方案的安全模型是和CP-ABE里边的安全模型是一样的。</p>
<h4 id="第一种构造"><a href="#第一种构造" class="headerlink" title="第一种构造"></a>第一种构造</h4><h5 id="Decisional-q-PBDHE-Assumption"><a href="#Decisional-q-PBDHE-Assumption" class="headerlink" title="Decisional q-PBDHE Assumption"></a>Decisional q-PBDHE Assumption</h5><p>判定型q-PBDHE假设描述为：选择一个乘法循环群 $\mathbb{G}_1$，阶数为$p$（$p$的选择依赖于具体方案的安全参数），令$a,s, b_1, …, b_q \in \mathbb{Z}_p$随机选取，$g$为群$\mathbb{G}_1$的生成元，如果攻击者获得向量$\overrightarrow{y} =$</p>
<script type="math/tex; mode=display">
\begin{align}
&g,g^s,g^a,...,g^{a^q},,g^{a^{q+2}},...,g^{a^{2q}} \nonumber \\
&\forall_{1\leq j\leq q}  g^{sb_j},g^{a/b_j},...,g^{a^q / b_j},,g^{a^{q+2} / b_j},...,g^{a^{2q} / b_j} \nonumber\\
&\forall_{1<\leq j,k\leq q,k\neq j} g^{a \cdot s \cdot b_k / b_j}, ..., g^{a^q \cdot s \cdot b_k / b_j} \nonumber
\end{align}</script><p>那么他分辨$e(g,g)^{a^{q+1}s} \in \mathbb{G}_2$和$ \mathbb{G}_2$上的一个随机元素$R$是困难的。<br>论文中定义攻击者决定$\mathbb{G}_1$上的q-PBDHE困难问题的优势为：</p>
<script type="math/tex; mode=display">
|Pr[\mathcal{B}(\overrightarrow{y},T=e(g,g)^{a^{q+1}s})=0]-Pr[\mathcal{B}(\overrightarrow{y},T=R)=0]|</script><p>注意这个地方定义的优势和前面FIBE以及CP-ABE中的优势不一样，但是描述的本质是一样的。</p>
<h5 id="方案的具体构造"><a href="#方案的具体构造" class="headerlink" title="方案的具体构造"></a>方案的具体构造</h5><h6 id="Setup-U"><a href="#Setup-U" class="headerlink" title="Setup($U$)"></a><strong>Setup($U$)</strong></h6><p>算法输入系统的总属性个数$U$，然后生成系统参数，包括阶数为$p$的乘法循环群$\mathbb{G}_1$，生成元$g$。然后随机生成$U$个与系统属性有关的元素$h_1,…,h_U \in \mathbb{G}_1$，此外，选择两个指数$\alpha ,a \in \mathbb{Z}_p$。<br>系统的公开参数为</p>
<script type="math/tex; mode=display">
PK=(g,e(g,g)^\alpha ,g^a,h_1,...,h_U)</script><p>系统的主密钥为$MSK=g^ \alpha$。</p>
<h6 id="Encrypt-PK-M-rho-mathcal-M"><a href="#Encrypt-PK-M-rho-mathcal-M" class="headerlink" title="Encrypt($PK,(M, \rho) ,\mathcal{M}$)"></a><strong>Encrypt($PK,(M, \rho) ,\mathcal{M}$)</strong></h6><p>加密算法将$PK$和消息$\mathcal{M}$作为输入。首先选择一个线性秘密共享方案的访问结构$(M, \rho)$，函数$\rho$将矩阵$M \in \mathbb{Z}_p ^{l \times n}$的每一行映射到一个属性。<br>首先选择随机向量$\overrightarrow{v} = (s,y_2,…,y_n) \in \mathbb{Z}_p^n$，$y_2,…,y_n$的作用是来分享秘密值$s$。$\forall i \in \left\{1,2,…,l \right\}$，计算$\lambda _i = M_i\overrightarrow{v}$，其中$M_i$ 表示矩阵$M$的第$i$行。此外，随机选择$r_1,…,r_l \in \mathbb{Z}_p$，然后得到密文形式为：</p>
<script type="math/tex; mode=display">
CT=((M, \rho),\mathcal{M}e(g,g)^{\alpha s},C ^\prime = g^s,\forall i \in [l]:C_i=g^{a\lambda _i}h_{\rho(i)}^{-r_i},C_i^\prime = g^{r_i}).</script><h6 id="KeyGen-MSK-S"><a href="#KeyGen-MSK-S" class="headerlink" title="KeyGen($MSK, S$)"></a><strong>KeyGen($MSK, S$)</strong></h6><p>密钥生成算法将主密钥$MSK$和用户的属性集合$S$作为输入。算法随机选择$t \in \mathbb{Z}_p$，然后产生密钥为：</p>
<script type="math/tex; mode=display">
SK=(K=g^\alpha g^{at},L=g^t,\forall x \in S:K_x = h_x^t).</script><h6 id="Decrypt-CT-SK"><a href="#Decrypt-CT-SK" class="headerlink" title="Decrypt($CT,SK$)"></a><strong>Decrypt($CT,SK$)</strong></h6><p>解密算法将密文$CT$和密钥$SK$作为输入。如果密钥$SK$对应的属性集合$S$满足访问结构，则根据LSSS的线性重构的性质，可以得到一组常数$\left \{ \omega _i \in \mathbb{Z}_p \right \}_{i \in I}$，使得$\sum _{i \in I}\omega_i \lambda _i = s$，其中$I \subset  [l]$为$I=\left \{ i:\rho (i) \in S \right \}$，表示$S$和访问结构的属性交集。然后便可以通过如下方式解密：</p>
<script type="math/tex; mode=display">
\begin{aligned}
&e(C^\prime,K)/( \prod _{i \in I} (e(C_i,L)e(D_i,K_{\rho(i)}))^{\omega _i})= \nonumber\\
&e(g,g)^{\alpha s}e(g,g)^{ast}/( \prod _{i \in I} e(g,g)^{ta\lambda _i \omega _i})=e(g,g)^{\alpha s} \nonumber
\end{aligned}</script><p>进而就能从$C$部件中恢复出明文$\mathcal{M}$。</p>
<h4 id="第二种构造"><a href="#第二种构造" class="headerlink" title="第二种构造"></a>第二种构造</h4><h5 id="Decisional-BDHE-Assumption"><a href="#Decisional-BDHE-Assumption" class="headerlink" title="Decisional BDHE Assumption"></a>Decisional BDHE Assumption</h5><p>判定型q-BDHE假设描述为：选择一个乘法循环群 $\mathbb{G}_1$，阶数为$p$（$p$的选择依赖于具体方案的安全参数），令$a,s \in \mathbb{Z}_p$随机选取，$g$为群$\mathbb{G}_1$的生成元，如果攻击者获得向量</p>
<script type="math/tex; mode=display">
\overrightarrow{y} =(g,g^{a^1}, ..., g^{a^q}, , g^{a^{q+2}}, ..., g^{a^{2q}}, g^s)</script><p>那么他分辨$e(g,g)^{a^{q+1}s} \in \mathbb{G}_2$和$ \mathbb{G}_2$上的一个随机元素$R$是困难的。<br>论文中定义攻击者决定$\mathbb{G}_1$上的q-BDHE困难问题的优势为：</p>
<script type="math/tex; mode=display">
|Pr[\mathcal{B}(\overrightarrow{y},T=e(g,g)^{a^{q+1}s})=0]-Pr[\mathcal{B}(\overrightarrow{y},T=R)=0]|</script><h5 id="方案的具体构造-1"><a href="#方案的具体构造-1" class="headerlink" title="方案的具体构造"></a>方案的具体构造</h5><h6 id="Setup-U-1"><a href="#Setup-U-1" class="headerlink" title="Setup($U$)"></a><strong>Setup($U$)</strong></h6><p>算法输入系统的总属性个数$U$，然后生成系统参数，包括阶数为$p$的乘法循环群$\mathbb{G}_1$，生成元$g$。然后随机生成$U$个与系统属性有关的元素$h_1,…,h_U \in \mathbb{G}_1$，此外，选择两个指数$\alpha ,a \in \mathbb{Z}_p$。<br>系统的公开参数为</p>
<script type="math/tex; mode=display">
PK=(g,e(g,g)^\alpha ,g^a,h_1,...,h_U)</script><p>系统的主密钥为$MSK=g^ \alpha$。</p>
<h6 id="Encrypt-PK-M-rho-mathcal-M-1"><a href="#Encrypt-PK-M-rho-mathcal-M-1" class="headerlink" title="Encrypt($PK,(M, \rho) ,\mathcal{M}$)"></a><strong>Encrypt($PK,(M, \rho) ,\mathcal{M}$)</strong></h6><p>加密算法将$PK$和消息$\mathcal{M}$作为输入。首先选择一个线性秘密共享方案的访问结构$(M, \rho)$，函数$\rho$将矩阵$M \in \mathbb{Z} _p^{l \times n}$的每一行映射到一个属性。<br>首先选择随机向量$\overrightarrow{v} = (s,y_2,…,y_n) \in \mathbb{Z}_p^n$，$y_2,…,y_n$的作用是来分享秘密值$s$。$\forall i \in \left\{1,2,…,l \right\}$，计算$\lambda _i = M_i\overrightarrow{v}$，其中$M_i$ 表示矩阵$M$的第$i$行。然后得到密文形式为：</p>
<script type="math/tex; mode=display">
CT=((M, \rho),C=\mathcal{M}e(g,g)^{\alpha s},C ^\prime = g^s,\forall i \in [l]:C_i=g^{a\lambda _i}h_{\rho(i)}^{-s}).</script><h6 id="KeyGen-MSK-S-1"><a href="#KeyGen-MSK-S-1" class="headerlink" title="KeyGen($MSK, S$)"></a><strong>KeyGen($MSK, S$)</strong></h6><p>密钥生成算法将主密钥$MSK$和用户的属性集合$S$作为输入。算法随机选择$t \in \mathbb{Z}_p$，然后产生密钥为：</p>
<script type="math/tex; mode=display">
SK=(K=g^\alpha g^{at},L=g^t,\forall x \in S:K_x = h_x^t).</script><h6 id="Decrypt-CT-SK-1"><a href="#Decrypt-CT-SK-1" class="headerlink" title="Decrypt($CT,SK$)"></a><strong>Decrypt($CT,SK$)</strong></h6><p>解密算法将密文$CT$和密钥$SK$作为输入。如果密钥$SK$对应的属性集合$S$满足访问结构，则根据LSSS的线性重构的性质，可以得到一组常数$\left \{ \omega _i \in \mathbb{Z}_p \right \}_{i \in I}$，使得$\sum _{i \in I}\omega_i \lambda _i = s$，其中$I \subset  [l]$为$I=\left \{ i:\rho (i) \in S \right \}$，表示$S$和访问结构的属性交集。然后便可以通过如下方式解密：</p>
<script type="math/tex; mode=display">
\begin{aligned}
&e(C^\prime,K)/( \prod _{i \in I} (e(C_i,L)e(C^ \prime,K_{\rho(i)}))^{\omega _i})= \nonumber \\
&e(g,g)^{\alpha s}e(g,g)^{ast}/( \prod _{i \in I} e(g,g)^{ta\lambda _i \omega _i})=e(g,g)^{\alpha s} \nonumber
\end{aligned}</script><p>进而就能从$C$部件中恢复出明文$\mathcal{M}$。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>从以上描述的两种构造方式来看，其访问结构均为线性秘密共享，初一看两个方案的整体差不多。就密文而言，第一种构造对于每个属性有两项，而第二种构造只有一项；就密钥而言，二者产生的是一样的。两种构造最大的差别就是基于的难题形式不同（本质上都是离散对数难题，Diffie-Hellman难题只是很多的变种）。由于第一种构造基于q-PBDHE假设，比较复杂，第二种构造基于q-BDHE，相对简单。这两种方案的构造为后面的ABE的构造带来启示，许多ABE方案都是在这两种方案上拓展的。此外，这两个方案还是仅仅针对基本的四个过程，后面的ABE方案会关注属性撤销、多个权威机构、防止共谋攻击等安全需求。ABE方案的设计能兼顾更多地安全需求自然是更好地，更符合现实场景，进而更实用。<br><span name="ref1">B. Waters, “Ciphertext-policy attribute-based encryption: An expressive, efficient, and provably secure realization,” in <em>Proc. PKC’11</em>, 2011, pp. 53–70, Springer.</span></p>
]]></content>
      <categories>
        <category>属性基加密</category>
      </categories>
      <tags>
        <tag>属性基加密</tag>
        <tag>访问结构</tag>
      </tags>
  </entry>
  <entry>
    <title>DAC-MACS</title>
    <url>/2021/04/15/DAC-MACS/</url>
    <content><![CDATA[<h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><p>前面介绍了ABE有关的大部分知识，包括访问结构、密钥托管、属性撤销、共谋攻击、外包解密等诸多方面，今天要介绍的这篇论文是经典的ABE构造，方案简称为DAC-MACS<sup><a href="ref1">1</a></sup>，由Yang等人构造。方案中融合了几乎所有前面讲到的这些方面的内容，属于Chase<sup><a href="ref2">2</a></sup>系列的多属性权威机构ABE，能实现属性撤销，能防止用户的共谋，能外包解密。DAC-MACS方案是基于Waters的ABE-2SPR<sup><a href="ref3">3</a></sup>的第一种构造，因此是构建在Decisional q-PBDHE难题之上，运用了Green<sup><a href="ref4">4</a></sup>的外包解密技巧，可以说是经典的多属性权威ABE方案。下面我们来一睹DAC-MACS的内部构造吧！</p>
<span id="more"></span>
<h4 id="系统模型"><a href="#系统模型" class="headerlink" title="系统模型"></a>系统模型</h4><p>DAC-MACS方案中涉及五类实体，分别为全局证书机构（CA）、属性权威机构（AAs)、云服务器（CSP）、数据拥有者（DO）和数据消费者（DU）。</p>
<ul>
<li><p>CA：系统中全局可信的证书机构，针对每一个合法用户，CA分配一个全局唯一的用户身份，并为其生成全局公私钥对。CA不参与任何属性的管理，这意味着它并不为DU生成属性密钥。</p>
</li>
<li><p>AA：每一个AA都是一个独立的属性权威机构，负责产生、撤销以及更新用户的属性（只要用户的该属性由它所管理）。每个AA会为其管理的每一个属性生成系统的属性公钥，并为用户生成属性密钥。</p>
</li>
<li>CSP：存储DO的加密的密文的地方，也为用户生成解密令牌，如果存在属性撤销，则辅助更新密文到系统的最新版本。</li>
<li>DO：需要存储数据到CSP的用户。</li>
<li>DU：需要从CSP获取数据的用户。</li>
</ul>
<h4 id="威胁模型"><a href="#威胁模型" class="headerlink" title="威胁模型"></a>威胁模型</h4><ul>
<li><p>CA：完全可信的，但是不允许解密任何密文。</p>
</li>
<li><p>AA：可信的，但是可以被攻击者攻击“腐败”。</p>
</li>
<li>CSP：半可信的（诚实且好奇），即CSP会诚实地执行系统中它所负责的工作，但是会对存储的密文产生好奇。</li>
<li>DU：非诚实的，存在共谋行为。</li>
<li>所有非撤销者：不将收到的密钥更新密钥与撤销用户共享。</li>
</ul>
<h4 id="具体构造"><a href="#具体构造" class="headerlink" title="具体构造"></a>具体构造</h4><h5 id="系统初始化"><a href="#系统初始化" class="headerlink" title="系统初始化"></a>系统初始化</h5><p>记$S_A$和$S_U$分别表示属性权威机构的集合和系统属性的集合，记$\mathbb{G}$和$\mathbb{G}_T$为两个阶数为$p$的乘法循环群，$e:\mathbb{G} \times \mathbb{G} \rightarrow \mathbb{G}_T$为双线性映射，$g$为$\mathbb{G}$的生成元。记$H:\left\{0,1 \right\}^+ \rightarrow \mathbb{G}$为哈希函数。</p>
<h6 id="CA-Setup"><a href="#CA-Setup" class="headerlink" title="CA Setup"></a>CA Setup</h6><p>CA首先产生一对签名和验证密钥$(sk_{CA}, vk_{CA})$，然后选择随机数$a \in \mathbb{Z}_p$作为系统的主密钥，计算系统参数为$SP=(g,g^a,\mathbb{G},\mathbb{G}_T,H)$。</p>
<ol>
<li>User Registration：每个用户需要向CA注册自己的信息，如果用户是系统的合法用户，则为该用户分配一个全局唯一的ID$uid$，生成全局公钥$GPK_{uid}=g^{u_{uid}}$和全局私钥$GSK_{uid}=z_{uid}$，其中$u_{uid},z_{uid} \in \mathbb{Z}_p$随机选取。CA随后产生该用户的证书$Cert(uid)$，其中包含$Sign_{sk_{CA}}(uid, u_{uid},g^{1/z_{uid}})$。最后CA将全局公私钥对$(GPK_{uid},GSK_{uid})$和证书$Cert(uid)$发送给用户$uid$。</li>
<li>AA Registration：每一个AA需要向CA注册自己的信息，如果AA是系统的合法机构，则为该AA分配一个全局唯一ID$aid$，然后将CA的验证密钥$vk_{CA}$和系统参数$SP$发送给AA。</li>
</ol>
<h6 id="AA-Setup"><a href="#AA-Setup" class="headerlink" title="AA Setup"></a>AA Setup</h6><p>每一个$AA_k(k \in S_A)$运行AA Setup步骤。记$S_{A_k}$表示$AA_k$所管理的属性的集合，$AA_k$选择三个随机数$\alpha_k, \beta_k, \gamma_k \in \mathbb{Z}_p$作为该机构的私钥，即$SK_k=(\alpha_k, \beta_k, \gamma_k)$。对于每一个属性$x_k \in S_{A_k}$，$AA_k$计算产生属性公钥$PK_{x_k}=(g^{v_{x_k}}H(x_k))^{\gamma_k}$，其中$VK_{x_k}=v_{x_k}$为该属性的版本密钥，$AA_k$还计算该机构自身的公钥$PK_k=(e(g,g)^{\alpha_k},g^{1/\beta_k},g^{\gamma_k/\beta_k})$。所有的属性公钥和$AA_k$的机构公钥都可以在该机构的“公告栏”获取。</p>
<h5 id="用户私钥生成"><a href="#用户私钥生成" class="headerlink" title="用户私钥生成"></a>用户私钥生成</h5><p>对于每一个用户$U_j(j \in S_U)$，每一个$AA_k$首先用CA的验证密钥$vk_{CA}$验证该用户的证书$Cert(uid)$来判断其是否合法，如果合法，才为其分发密钥。$AA_k$会根据该用户在自己这拥有的属性，计算一系列的用户私钥$SK_{j,k}$。针对每一个$AA_k$，选择一个随机数$t_{j,k} \in \mathbb{Z}_p$，然后计算$SK_{j,k}$如下：</p>
<script type="math/tex; mode=display">
\begin{aligned}
& SK_{j,k}=( K_{j,k}=g^{\alpha_k/z_j} \cdot g^{au_j} \cdot g^{at_{j,k}/\beta_k}, 
L_{j,k}=g^{\beta_kt_{j,k}/z_j},R_{j,k}=g^{at_{j,k}},  \nonumber\\
& \forall x_k \in S_{j,k}:K_{j,x_k} =g^{\beta_k \gamma_k t_{j,k}/z_j} \cdot (g^{v_{x_k}} \cdot H(x_k))^{\gamma_k \beta_k u_j}). \nonumber
\end{aligned}</script><p>其中，$j \in S_U, k \in S_A$。</p>
<h5 id="数据加密"><a href="#数据加密" class="headerlink" title="数据加密"></a>数据加密</h5><p>在DO将数据$m$外包到CSP上之前，DO为其进行加密。DO定义自己的访问结构，以线性秘密共享方案的形式，即访问结构为$(M, \rho)$，其中$M$为$l \times n$的矩阵，$l$为所有属性的个数，函数$\rho$将矩阵的每一行映射到一个属性。</p>
<p>首先将消息$m$切分为若干数据块，即$m=\left\{m_1,…,m_n \right\}$，然后针对每一个数据块选择一个对称密钥$\left\{\kappa_1,…, \kappa_n \right\}$，用对称密钥$\kappa_i$加密数据块$m_i$。不失一般性，以下只针对某一个数据块$m$的加密过程进行描述。</p>
<p>DO随机选择秘密值$s \in \mathbb{Z}_p$，选择随机向量$\overrightarrow{v} =(s,y_2,…,y_n) \in \mathbb{Z}_p^n$，其中$y_2,…,y_n$随机选取，其作用是分享秘密值$s$。对于$i \in [l]$，计算$\lambda_i = \overrightarrow {v}M_i$，其中$M_i$为矩阵$M$的第$i$行，然后随机选择$r_1,…,r_l \in \mathbb{Z}_p$，计算密文如下：</p>
<script type="math/tex; mode=display">
\begin{aligned}
&  CT=(En_\kappa(m), C=\kappa \cdot(\prod_{k \in I_A}e(g,g)^{\alpha_k})^s, C^\prime=g^s,{C}''=g^{s/\beta_k}, \nonumber\\
&  \forall i \in [l]:C_i=g^{a\lambda_i} \cdot ((g^{v_{\rho(i)}}H(\rho(i)))^{\gamma_k})^{-r_i}, D_{1,i}=g^{r_i/\beta_k},D_{2,i}=g^{-\gamma_kr_i/\beta_k}, \rho(i) \in S_{A_k} ). \nonumber
\end{aligned}</script><h5 id="数据解密"><a href="#数据解密" class="headerlink" title="数据解密"></a>数据解密</h5><p>系统中的合法用户可以可以从CSP查询获取任何密文，但是只有属性集合满足访问结构的用户才能够解密出对称密钥，进而恢复出消息$m$。</p>
<h6 id="CSP计算Token"><a href="#CSP计算Token" class="headerlink" title="CSP计算Token"></a>CSP计算Token</h6><p>用户$U_j(j \in S_U)$将他的私钥$\left\{SK_{j,k} \right\}_{k \in S_A}$发送给CSP，让CSP为其计算生成解密令牌$TK$。当且仅当用户的属性集合满足密文的访问结构的时候，CSP才能正确计算出$TK$。</p>
<p>记$I=\left\{I_{A_k} \right\}_{k \in S_A}$为与密文有关的所有索引的集合，其中$I_{A_k} \sqsubset \left\{1,2,…,l \right\}$定义为$I_{A_k}=\left\{i:\rho(i) \in S_{A_k} \right\}$。举个例子，例如矩阵$M$有6行，$\rho(1)$为属性$a_1$，……，$\rho(6)$为属性$a_6$，一共有三个属性机构$A_1,A_2,A_3$，$A_1=\left\{a_1,a_6 \right\}$，$A_2=\left\{a_2,a_4,a_5 \right\}$，$A_3=\left\{a_3 \right\}$，假设用户Alice有属性$\left\{a_1,a_2,a_3,a_4 \right\}$，则$I_{A_1}=\left\{1 \right\}$，$I_{A_2}=\left\{2,4 \right\}$，$I_{A_3}=\left\{3 \right\}$，所以$I=\left\{I_{A_1},I_{A_2},I_{A_3} \right\}=\left\{1,2,3,4\right\}$。</p>
<p>记$N_A=|I_A|$为与密文中属性有关的机构个数（上述例子中$N_A=3$），CSP选择一系列的常数$\left\{\omega_i \in \mathbb{Z}_p \right\}_{i \in I}$，然后重构秘密值$s=\sum_{i \in I} \omega_i \lambda_i$，然后计算$TK$如下。</p>
<script type="math/tex; mode=display">
\begin{aligned}
& TK=\prod_{k \in I_A} \frac{e(C^\prime,K_{j,k}) \cdot e(R_{j,k},{C}'')^{-1}}
{\prod _{i \in I_{A_k}} (e(C_i,GPK_j) \cdot e(D_{1,i},K_{j,\rho(j)}) \cdot e(D_{2,i},L_{j,k}))^{\omega_iN_A}} \nonumber\\
& =\frac{e(g,g)^{au_jsN_A} \cdot \prod_{k \in I_A} e(g,g)^{\alpha_ks/z_j}}
{e(g,g)^{u_jaN_A \sum_{i \in I} \lambda_i \omega_i}} \nonumber \\
& =\prod_{k \in I_A} e(g,g)^{\alpha_ks/z_j}. \nonumber
\end{aligned}</script><p>然后CSP将$TK$返回给用户$U_j$。</p>
<h6 id="用户解密"><a href="#用户解密" class="headerlink" title="用户解密"></a>用户解密</h6><p>用户$U_j$收到$TK$后，用自己的全局私钥$GSK_j=z_j$解密对称密钥$\kappa = \frac{C}{TK^{z_j}}$。然后用对称密钥$\kappa$解密密文$m=Dec_{\kappa}(Enc_{\kappa}(m))$。</p>
<h5 id="属性撤销"><a href="#属性撤销" class="headerlink" title="属性撤销"></a>属性撤销</h5><p>假设属性用户$U_\mu$ 的属性$\widetilde{x}_k$从$AA_k$那撤销了，那么属性撤销阶段分以下三步进行。</p>
<h6 id="AA-s-生成更新密钥"><a href="#AA-s-生成更新密钥" class="headerlink" title="$AA_s$生成更新密钥"></a>$AA_s$生成更新密钥</h6><p>相应的$AA_k$选择一个新的属性$\widetilde{x}_k$的版本密钥$VK_{\widetilde{x}_k}^\prime = v_{\widetilde{x}_k}^\prime$，然后计算属性更新密钥$AUK_{\widetilde{x}_k}=\gamma_k(v_{\widetilde{x}_k}^\prime - v_{\widetilde{x}_k})$，进而生成密钥更新密钥$KUK_{j,\widetilde{x}_k}=g^{u_j \beta_k \cdot AUK_{\widetilde{x}_k}}$和密文更新密钥$CUK_{\widetilde{x}_k} = \beta_k \cdot AUK_{\widetilde{x}_k}/\gamma_k$。然后$AA_k$将属性$\widetilde{x}_k$的属性公钥更新为$PK_{\widetilde{x}_k}^\prime=PK_{\widetilde{x}_k} \cdot g^{AUK_{\widetilde{x}_k}}$，并全系统广播属性$\widetilde{x}_k$有关的密文密钥更新过了。</p>
<h6 id="非撤销用户更新属性部件"><a href="#非撤销用户更新属性部件" class="headerlink" title="非撤销用户更新属性部件"></a>非撤销用户更新属性部件</h6><p>对于那些没有撤销$\widetilde{x}_k$的用户$U_j(j \in S_U,j \neq \mu)$，$AA_k$发给他们密钥更新密钥$KUK_{j,\widetilde{x}_k}$。用户拿到更新密钥后，更新自己的私钥为：</p>
<script type="math/tex; mode=display">
\begin{aligned}
& SK_{j,k}^\prime=( K_{j,k}^\prime=K_{j,k}, L_{j,k}^\prime=L_{j,k},R_{j,k}^\prime=R_{j,k}, \nonumber\\
& K_{j,\widetilde{x}_k}^\prime=K_{j,\widetilde{x}_k} \cdot KUK_{j,\widetilde{x}_k}, \forall x_k \in S_u, x_k \neq \widetilde{x}_k:K_{j,x_k}^\prime=K_{j,x_k} ). \nonumber
\end{aligned}</script><h6 id="CSP更新密文部件"><a href="#CSP更新密文部件" class="headerlink" title="CSP更新密文部件"></a>CSP更新密文部件</h6><p>$AA_k$发给CSP密文更新密钥$CUK_{\widetilde{x}_k}$，然后密文更新为：</p>
<script type="math/tex; mode=display">
\begin{aligned}
& CT^\prime=(En_\kappa(m), C=\kappa \cdot(\prod_{k \in I_A}e(g,g)^{\alpha_k})^s, C^\prime=g^s,{C}''=g^{s/\beta_k}, \nonumber\\
& \forall i \in [l]: \nonumber\\
& if \rho(i) \neq \widetilde{x}_k: C_i=g^{a\lambda_i} \cdot ((g^{v_{\rho(i)}}H(\rho(i)))^{\gamma_k})^{-r_i}, \nonumber\\ & D_{1,i}=g^{r_i/\beta_k},D_{2,i}=g^{-\gamma_kr_i/\beta_k}, \nonumber\\ 
& if \rho(i) = \widetilde{x}_k: C_i^\prime = C_i \cdot D_{2,i}^{CUK_{\widetilde{x}_k}}, \nonumber\\
& D_{1,i}=g^{r_i/\beta_k},D_{2,i}=g^{-\gamma_kr_i/\beta_k}). \nonumber
\end{aligned}</script><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>从具体的构造来看，DAC-MACS设计的还是相当的复杂，这是因为ABE算法本身就需要考虑诸多属性，而与之有关的有密文和密钥两大部分，再加上要设计成多个权威机构，那么系统中与属性相关联的又多了一层实体。这可以和Chase的方案对比，很明显其复杂度不言而喻，因为Chase的ABE方案算是门限ABE，而且没有属性撤销这一安全需求。</p>
<p>从DAC-MACS的设计中可以看到，每一个AA的主密钥有三个之多，这正是为了实现后边的属性撤销而预设的。回头看一下，DAC-MAC是将一个所谓的属性的版本密钥嵌入到属性有关部件里边，然后有属性撤销发生，则将对应的版本密钥更新，这样做的好处是，只有与撤销有关的密文密钥部件才会更新值，而不相关属性的部件不会变化，大大减少了撤销时的计算量，因此这种撤销的手段是很典型的高效撤销机制。</p>
<p>而DAC-MACS又是如何实现解密操作外包的呢？这是由于CSP为用户计算生成解密令牌，而大大减少了用户的解密开销，之所以用户将私钥给CSP也不会产生安全隐患，这是因为密钥中嵌入了用户的全局私钥信息，这一随机数其实就是O-ABE中盲化技术里的盲化因子。</p>
<p>DAC-MACS中提到了假定非撤销用户不会将密钥更新密钥透露给非撤销用户，这是因为如果透露了，那么撤销用户仍然能够更新自己的私钥，从而解密最近的密文。正因为如此，作者才推出EDAC-MACS来消除这一假设前提，以增强方案的安全性，但是Wu<sup><a href="ref1">5</a></sup>等人针对EDAC-MACS方案，还是分析出其中的漏洞。不过不管怎样，DAC-MACS还是一种经典的多属性权威ABE方案的构造，其中的细节值得回味，其中的技巧值得借鉴。</p>
<p><span name="ref1">K. Yang, X. H. Jia, K. Ren, B. Zhang, and R. T. Xie, “DAC-MACS: Effective Data Access Control for Multi-authority Cloud Storage Systems,” <em>IEEE Transactions on Information Forensics and Security</em>, vol. 8, no.11, pp. 1790-1801, Nov. 2013.</span></p>
<p><span name="ref2">M. Chase, “Multi-authority attribute based encryption,” in <em>Proc. TCC’07</em>, 2007, pp. 515–534, Springer.</span></p>
<p><span name="ref3">B. Waters, “Ciphertext-policy attribute-based encryption: An expressive, efficient, and provably secure realization,” in <em>Proc. PKC’11</em>, 2011, pp. 53–70, Springer.</span></p>
<p><span name="ref4">M. Green, S. Hohenberger, and B. Waters, “Outsourcing the Decryption of ABE Ciphertexts,” in <em>Proceedings of the 20th USENIX conference on Security</em>, San Francisco, CA, USA, 2011.</span></p>
<p><span name="ref5">X. Wu, R. Jiang and B. Bhargava, “On the Security of Data Access Control for Multiauthority Cloud Storage Systems,” <em>IEEE Transactions on Services Computing</em>, vol. 10, no. 2, pp. 258-272, 1 March-April 2017.<span></span></span></p>
]]></content>
      <categories>
        <category>属性基加密</category>
      </categories>
      <tags>
        <tag>属性基加密</tag>
        <tag>属性撤销</tag>
        <tag>多个属性机构</tag>
        <tag>外包解密</tag>
        <tag>共谋攻击</tag>
      </tags>
  </entry>
  <entry>
    <title>Hur1-ABE</title>
    <url>/2021/04/11/Hur1-ABE/</url>
    <content><![CDATA[<h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><p>前面多次提到了属性撤销和防止共谋攻击的概念，这两个安全需求在属性基加密方案的设计方面至关重要，必须得考虑到。为什么这么说呢？根据前面构造的CP-ABE方案的细节，我们知道一个用户的密钥和系统中的密文中都包含许多个部件，大致可分为两类，一类是与属性有关的，一类是与属性无关的。</p>
<span id="more"></span>
<p>用户的私钥是根据他所拥有的属性来生成并分发的，不是说属性基加密的解密条件是当且仅当用户的属性集合满足密文的访问策略吗？光凭借自己的属性无法达到条件，自然的想法是几个用户拿出自己的属性密钥拼凑试图解密密文，因为几个人的属性拼凑起来就有可能满足访问结构了。还有，用户所拥有的属性并不是一层不变的，可能某个时刻因某种原因，用户的某个属性不在拥有了，那么他还能拥有解密的能力吗？显然以上两种情况都是不允许解密的。下面给属性撤销和防止共谋攻击下定义。</p>
<ul>
<li>属性撤销：一个用户的某个属性撤销了，而该属性是密文中访问结构的关键属性，即该用户的属性集合不再满足访问结构，那么他原则上不能解密最新上传的密文。<ul>
<li>如果撤销的属性并不影响，即该用户的当前属性集合仍然满足访问结构的话，他仍可以解密。</li>
<li>该用户原来的密钥还是可以解密原来的密文，因为在撤销之前，他的属性集合是满足条件的。</li>
</ul>
</li>
<li>共谋攻击：多个实体本身不能单独解密密文，试图将各自的密钥结合起来以达到解密密文的目的。<ul>
<li>这里是用实体，因为在实际场景中除了用户之外，还有存储密文的云服务器、网络攻击者等其他实体。</li>
</ul>
</li>
</ul>
<p>本文主要介绍Hur和Noh的方案构造，之所以取名字为Hur1-ABE<sup><a href="ref1">1</a></sup>，是与Hur后来提出的Hur2-ABE<sup><a href="ref2">2</a></sup>相区别的，Hur2-ABE在后边会具体介绍。</p>
<h4 id="KEK树描述"><a href="#KEK树描述" class="headerlink" title="KEK树描述"></a>KEK树描述</h4><p>Hur1-ABE实现属性撤销的方式，是借助KEK树这一特殊结构，并将用户根据不同的属性创建属性群，然后针对每一个属性群，构造一颗KEK树。这个KEK树的结构主要作用是共享群密钥，从而相应地嵌入到密文密钥中，以便日后的属性撤销。那么我们来看一看KEK树是怎样的一种结构吧。</p>
<img src="/2021/04/11/Hur1-ABE/KEK_Tree.jpg" class title="KEK Tree">
<p>KEK树本质上是一颗二叉树，树的每一个叶子节点和一个用户相联系。树中的每一个节点$v_j$都有一个密钥更新密钥$KEK_j$，为了方案的理解，定义一些与之有关的概念。</p>
<ul>
<li>路径节点集合$path(y)$：描述的是叶子节点到根节点的路径节点的集合，比如$v_9$节点的路径节点$path(v_9)= \left\{v_4,v_2,v_1 \right \}$。</li>
<li>路径节点密钥$PK_i$：描述的是用户$u_i$对应的叶子节点$y$的路径节点KEK的集合，比如用户$u_2$的路径节点密钥$PK_2=\left \{ KEK4, KEK_2, KEK_1 \right \}$。</li>
</ul>
<p>若与树有关的属性群为$G_i$，则与该群有关的概念如下。</p>
<ul>
<li>最小覆盖集合$cover(G_i)$：描述的是树中最少的涵盖所有未撤销属性的用户的节点集合，假设上图中撤销用户为$\left \{u_6,u_8 \right\}$，则$cover(G_i)=\left\{ v_2,v_{12},v_{14}\right\}$。</li>
<li>最小覆盖密钥$KEK(G_i)$：描述的是最小覆盖集合$cover(G_i)$对应的密钥更新密钥，假设如上，则$KEK(G_i)=\left\{ KEK_2,KEK_{12},KEK_{14}\right \}$。</li>
</ul>
<h4 id="方案具体构造"><a href="#方案具体构造" class="headerlink" title="方案具体构造"></a>方案具体构造</h4><h5 id="System-Setup"><a href="#System-Setup" class="headerlink" title="System Setup"></a><strong>System Setup</strong></h5><p>在系统初始化阶段，可信机构（TA)选择双线性群$\mathbb{G}_0$，阶数为$p$，生成元为$g$。然后随机选择两个指数$\alpha ,\beta \in \mathbb{Z}_p$，系统公开参数为：</p>
<script type="math/tex; mode=display">
PK=\left ( \mathbb{G}_0,g,h=g^\beta ,e\left ( g,g \right )^\alpha  \right ).</script><p>主密钥为：$MK=\left ( \beta ,g^\alpha  \right )$。</p>
<h5 id="Key-Generation"><a href="#Key-Generation" class="headerlink" title="Key Generation"></a>Key Generation</h5><h6 id="属性密钥生成"><a href="#属性密钥生成" class="headerlink" title="属性密钥生成"></a>属性密钥生成</h6><p>给定一个用户的属性集合$\Lambda $，输出对应的密钥$SK$，具体如下：</p>
<p>TA针对每一个用户$u_t \in U$($U$为系统用户的集合)，随机选择$r \in \mathbb{Z}_p$，对于每一个属性$\forall \lambda _j \in \Lambda $， 随机选择$r_j \in \mathbb{Z}_p$，然后计算密钥如下：</p>
<script type="math/tex; mode=display">
SK_t=\left( D=g^{\left(\alpha +r \right)/\beta}, \forall j \in \Lambda : D_j=g^r\cdot H(j)^{r_j}, D_j^\prime=g^{r_j} \right).</script><p>此阶段和CP-ABE里边的密钥生成过程是一致的。然后TA将相关的属性群信息$\left\{G_j:\lambda_j \in \Lambda \right\}$给云服务器CSP（存储密文的地方），比如说用户$u_1,u_2,u_3$的属性集合分别为$\left\{\lambda_1,\lambda_2,\lambda_3\right\}$，$\left\{\lambda_2,\lambda_3\right\}$和$\left\{\lambda_1,\lambda_3\right\}$，那么TA将$G_1=\left\{ u_1,u_3 \right\}$，$G_2=\left\{ u_1,u_2 \right\}$和$G_1=\left\{ u_1,u_2,u_3 \right\}$发送给CSP。</p>
<h6 id="CSP更新密钥"><a href="#CSP更新密钥" class="headerlink" title="CSP更新密钥"></a>CSP更新密钥</h6><p>然后CSP针对TA发送的每一个属性群构建KEK树，每一个用户被分配到一个叶子节点位置，树中的每一个节点$v_j$都有一个KEK密钥$KEK_j$。每一个用户$u_t \in  U$接收他的路径节点密钥，比如用户$u_2$的路径节点密钥为$PK_2=\left\{ KEK_9,KEK_4,KEK_2,KEK_1 \right\}$。</p>
<h5 id="Data-Outsourcing"><a href="#Data-Outsourcing" class="headerlink" title="Data Outsourcing"></a>Data Outsourcing</h5><p>数据拥有者定义一个访问结构$\mathcal{T}$（访问控制树形式），然后按如下方式进行加密：</p>
<p>针对树$\mathcal{T}$中的每一个节点$x$（包括联系属性的叶子节点），选择一个与之对应的多项式$q_x$。多项式$q_x$的的最高次数为$d_x=k_x-1$。</p>
<p>多项式的选取遵循由根节点到叶子节点（从上到下）的方式。从根节点$R$开始，选择秘密值$s \in \mathbb{Z}_p$，并设置$q_R \left(0 \right)=s$，然后随机选择其他项的次数。对于其他节点$x$，递归的设置$q_x \left( 0 \right) = q_{p\left(x \right)} \left(index\left(x \right) \right)$，至于$q_x$的其他系数随机选择。</p>
<p>记$Y$为树$\mathcal{T}$的叶子节点的集合，然后密文可以表示为：</p>
<script type="math/tex; mode=display">
CT=\left( \mathcal{T}, \widetilde{C}=Me\left ( g,g \right )^{\alpha s},C=h^s,\forall y \in Y:C_y=g^{q_y \left(0 \right )},
C_y^\prime=H \left(\lambda_y \right) ^ {q_y \left( 0  \right )} \right).</script><p>其中，$\lambda_y$表示的是叶子节点$y$对应的属性，$H \left(\cdot \right)$表示将属性映射到$\mathbb{G}_0$。</p>
<p>此阶段和CP-ABE方案中的加密阶段一致。</p>
<h5 id="Data-Re-Encryption"><a href="#Data-Re-Encryption" class="headerlink" title="Data Re-Encryption"></a>Data Re-Encryption</h5><p>此阶段CSP将重加密密文$CT$，具体如下：</p>
<ul>
<li>对于访问结构中涉及到的属性群$\left\{ G_y:y \in Y \right\}$，CSP随机选择属性群密钥$K_{\lambda_y} \in \mathbb{Z}_p$，然后重加密$CT$进而产生$CT^\prime$。</li>
</ul>
<script type="math/tex; mode=display">
CT^\prime=\left( \mathcal{T}, \widetilde{C}=Me\left ( g,g \right )^{\alpha s},C=h^s,\forall y \in Y:C_y=g^{q_y \left(0 \right )},C_y^\prime=\left(H \left(\lambda_y \right) ^ {q_y \left( 0  \right )} \right)^{K_{\lambda_y}}\right).</script><ul>
<li>对于每一个群$G_i$，计算得到其最小覆盖密钥$KEK(G_i)$。比如$G_i=\left\{ u_1,u_2,u_3,u_4,u_5,u_7 \right\}$，那么$KEK(G_i)=\left\{ KEK_2,KEK_{12},KEK_{14}\right \}$。</li>
<li>用所有的最小覆盖密钥加密该群的属性群密钥，即$\left\{E_K(K_{\lambda_y}) \right\}_{K \in KEK(G_y)}$（$E$为对称加密），然后所有的属性都是如此，公开此参数，即$Hdr=\left( \forall y \in Y:\left\{E_K(K_{\lambda_y}) \right\}_{K \in KEK(G_y)}\right)$。</li>
</ul>
<h5 id="Data-Decryption"><a href="#Data-Decryption" class="headerlink" title="Data Decryption"></a>Data Decryption</h5><p>密文的形式为：</p>
<script type="math/tex; mode=display">
CT^\prime=\left( \mathcal{T}, \widetilde{C}=Me\left ( g,g \right )^{\alpha s},C=h^s,\forall y \in Y:C_y=g^{q_y \left(0 \right )},C_y^\prime=\left(H \left(\lambda_y \right) ^ {q_y \left( 0  \right )} \right)^{K_{\lambda_y}}\right).</script><p>密钥的形式为：</p>
<script type="math/tex; mode=display">
SK_t=\left( D=g^{\left(\alpha +r \right)/\beta}, \forall \lambda_j \in \Lambda : D_j=g^r\cdot H(j)^{r_j}, D_j^\prime=g^{r_j} \right).</script><h6 id="属性群密钥解密"><a href="#属性群密钥解密" class="headerlink" title="属性群密钥解密"></a>属性群密钥解密</h6><p>当用户收到$Hdr$后，首先解密属性群密钥。如果用户$u_t$持有属性$\lambda_j$，那么他能解密$K_{\lambda_j}$，因为有且仅有一个$KEK \in KEK(G_j)\cap PK_t$，也就是说$Hdr$中含有诸多$K_{\lambda_j}$的密文（用不同的对称密钥加密），而$u_t$恰好有一把对称密钥可以解密。得到群密钥$K_{\lambda_j}$之后，用户$u_t$更新自己的私钥为：</p>
<script type="math/tex; mode=display">
SK_t=\left( D=g^{\left(\alpha +r \right)/\beta}, \forall \lambda_j \in \Lambda : D_j=g^r\cdot H(j)^{r_j}, D_j^\prime=(g^{r_j})^{1/K_{\lambda_j}} \right).</script><h6 id="密文解密"><a href="#密文解密" class="headerlink" title="密文解密"></a>密文解密</h6><p>首先定义一个递归的函数$DecryptNode(CT^\prime,SK,x)$（由下到上）:</p>
<ul>
<li><p>如果$x$为叶子节点，记$i=\lambda_x$。</p>
<ul>
<li><p>若$i \in \Lambda$（用户拥有属性$i$），则</p>
<script type="math/tex; mode=display">
\begin{aligned}
&DecryptNode(CT,SK,x) = \frac{e(D_i, C_x)}{e(D_i^\prime , C_x^ \prime)}= \nonumber \\ &\frac{e(g^r \cdot H(x)^{r_i}, h^{q_x(0)})}{(e(g^{r_i})^{1/K_{\lambda_x}} , (H(i)^{q_x(0)})^{K_{\lambda_x}})} = e(g,g)^{rq_x(0)}. \nonumber
\end{aligned}</script></li>
<li><p>若$i \notin \Lambda$，则定义$DecryptNode(CT,SK,x) =\perp $。</p>
</li>
</ul>
</li>
<li><p>如果$x$为非叶子节点，则$DecryptNode(CT,SK,x)$的计算规则如下：</p>
<ul>
<li><p>对于$x$节点的所有孩子节点$z$，调用$F_z = DecryptNode(CT,SK,z)$函数，记$F_z \neq \perp $的所有节点的集合为$S^ \prime$，若$|S^ \prime|&lt;k_x$，则$DecryptNode(CT,SK,x) =\perp $。</p>
</li>
<li><p>相反的话，则选取$S^ \prime$集合中任意$k_x$个元素组成集合$S_x$，按如下方式计算$DecryptNode(CT,SK,x)$：</p>
<script type="math/tex; mode=display">
\begin{aligned}
&F_z=\prod _{z \in S_x} F_z ^{\Delta _{i,S_x^ \prime} (0)} \nonumber \\
&=\prod _{z \in S_x} (e(g,g) ^ {rq_z(0)}) ^ {\Delta _{i,S_x^ \prime} (0)} \nonumber \\
&=\prod _{z \in S_x} (e(g,g) ^ {rq_{p(z)}(index(z))}) ^ {\Delta _{i,S_x^ \prime} (0)} \nonumber \\
&=\prod _{z \in S_x} (e(g,g)  ^ {r \cdot q_x(i) \cdot \Delta _{i,S_x^ \prime} (0)} \nonumber \\
&=e(g,g)^{rq_x(0)}.\nonumber
\end{aligned}</script></li>
</ul>
</li>
</ul>
<p>从递归函数的形式上看，尽管叶子节点和非叶子节点的具体计算方式不一样，但是有着统一的形式，因此只要能够依次满足条件地计算出树中适当个数的节点秘密值，就可以解密根节点的秘密值。即当属性集合$S$满足访问结构$\mathcal{T}$，那么就可以解密得到:</p>
<script type="math/tex; mode=display">
A = DecryptNode(CT,SK,r)=e(g,g)^{rq_R(0)} = e(g,g)^{rs}.</script><p>最后即可解密成功：</p>
<script type="math/tex; mode=display">
\widetilde{C}/(e(C,D)/A) = \widetilde{C}/(e(h^s,g^{((\alpha + r)/\beta )})/e(g,g)^{rs}) = M.</script><h5 id="Attribute-Revocation"><a href="#Attribute-Revocation" class="headerlink" title="Attribute Revocation"></a>Attribute Revocation</h5><p>假设属性群$G_i$中有成员变动（某用户撤销了属性$\lambda_i$，则需要更新密文和密钥，具体如下：</p>
<ul>
<li>CSP随机选择一个秘密值$s^\prime \in \mathbb{Z}_p$，然后再随机选取一个不一样的群密钥$K_{\lambda_i}^\prime \in \mathbb{Z}_p$，然后重加密密文得到新密文：</li>
</ul>
<script type="math/tex; mode=display">
\begin{aligned}
& CT^\prime=\left( \mathcal{T}, \widetilde{C}=Me\left ( g,g \right )^{\alpha (s+s^\prime)},C=h^{s+s^\prime},C_i=g^{q_i \left(0 \right )+s^\prime},C_i^\prime=\left(H \left(\lambda_i \right) ^ {q_i \left( 0  \right )+s^\prime} \right)^{K_{\lambda_y}^\prime}, \nonumber \\
 \forall y \in Y\setminus \left\{i \right\}:C_y=g^{q_y \left(0 \right )+s^\prime},C_y^\prime=\left(H \left(\lambda_y \right) ^ {q_y \left( 0  \right )+s^\prime} \right)^{K_{\lambda_y}}\right). \nonumber
\end{aligned}</script><ul>
<li>由于群$G_i$中有成员变动，那么此时的最小覆盖密钥发生了改变，重新计算$KEK(G_i)$，然后更新$Hdr$为$Hdr=\left( \left\{E_K(K_{\lambda_i}^\prime) \right\}_{K \in KEK(G_i)}，\forall y \in Y:\left\{E_K(K_{\lambda_y}) \right\}_{K \in KEK(G_y)}\right)$。</li>
</ul>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>Hur1-ABE首次提出属性群的概念，通过属性群借助KEK树的技巧完成属性的撤销。属性群的提出为属性的撤销机制开辟了道路，后续的ABE方案中有许多学者沿袭这一概念，从而衍生出不同的属性撤销方案，比如说接下来的Hur2-ABE方案等。然而方案并不能抵抗撤销用户与未撤销用户之间的共谋，这是因为属性群中对应的每个节点的节点密钥不变，而且CSP会根据用户所在的位置将其路径密钥发送给用户，如果用户将路径密钥给撤销用户，或者更直接一点，用户直接将解密的属性群密钥给撤销用户，这样一来，撤销用户还是可以自己更新到正确的密钥，从而解密最近的密文。</p>
<p><span name="ref1">J. Hur and D. K. Noh, “Attribute-based Access Control with Efficient Revocation in Data Outsourcing Systems,” IEEE Transactions on Parallel and Distributed Systems, vol. 22, no. 7, pp. 1214–1221, Jul. 2011.</span></p>
<p><span name="ref2">J. Hur, “Improving Security and Efficiency in Attribute-Based Data Sharing,” IEEE Transactions on Knowledge and Data Engineering, vol. 25, no. 10, pp. 2271-2282, Oct. 2013.</span></p>
]]></content>
      <categories>
        <category>属性基加密</category>
      </categories>
      <tags>
        <tag>属性基加密</tag>
        <tag>属性撤销</tag>
        <tag>共谋攻击</tag>
      </tags>
  </entry>
  <entry>
    <title>Hur2-ABE</title>
    <url>/2021/04/12/Hur2-ABE/</url>
    <content><![CDATA[<h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><p>前面介绍了Hur1-ABE<sup><a href="ref1">1</a></sup>，主要是在最原始的CP-ABE上边增加了属性撤销这一安全需求，而为实现属性撤销，借助了密钥更新树（KEK  Tree）这一技巧。今天介绍的Hur2-ABE<sup><a href="ref2">2</a></sup>方案，仍然是侧重属性撤销，但是并没有借助密钥更新树这类结构，而是借助多项式完成属性密钥的更新。除此之外，Hur2-ABE方案还在一定程度上解决了密钥托管的问题。在正式介绍方案具体构造之前，我们先来认识一下密钥托管问题以及文中提到的单向匿名密钥协商协议。</p>
<span id="more"></span>
<h4 id="密钥托管"><a href="#密钥托管" class="headerlink" title="密钥托管"></a>密钥托管</h4><p>密钥托管问题描述的是，密钥产生中心（有的地方叫做属性权威机构、可信中心等等）作为计算产生用户私钥的权威机构，一般在方案的系统模型中都是假定“诚实”的，这也就意味着系统中任何一个用户的私钥它都是知道到了，原则上来说它具有解密任何密文的能力。而在实际中对密钥产生中心的依赖当然是越弱越好。因此有的ABE通过研究削弱对用户密钥的的这种完全托管，使得密钥产生中心在“沦陷”之后，用户密钥还能不公开。</p>
<p>一般来说有两种常见的解决思路，一种是将一个密钥产生中心按照属性域的区别，划分为多个属性权威机构，而另一种是密钥产生中心与其他实体交互产生用户密钥。Hur2-ABE就是通过第二种机制，来消除密钥托管，文中将该方法叫做2PC，即两部分计算。</p>
<h4 id="单向匿名密钥协商"><a href="#单向匿名密钥协商" class="headerlink" title="单向匿名密钥协商"></a>单向匿名密钥协商</h4><p>密钥协商在两个乃至多个实体之间秘密通信显得尤为重要，而现实中又有些场景既需要秘密通信，又希望向对方隐藏自己的身份。文中描述了单向匿名密钥协商协议，具体过程如下：</p>
<img src="/2021/04/12/Hur2-ABE/two_PC.PNG" class title="2PC Process">
<ol>
<li>假设Alice和Bob是某个权威机构的用户，Alice的身份为$ID_A$，权威机构给她的私钥为$d_A=Q_A^s=H(ID_A)^s$。现在Alice希望与身份为$ID_B$的Bob通信并保持匿名；</li>
<li>Alice计算$Q_B=H(ID_B)$，然后她选择随机数$r_A \in \mathbb{Z}_p$，产生一个过渡值$P_A=Q_A^{r_A}$，计算会话秘钥为$K_{A,B}=e(d_A, Q_B)^{r_A}=e(Q_A,Q_B)^{sr_A}$，最后Alice将过渡值$P_A$发送为Bob；</li>
<li>Bob收到$P_A$后计算出会话密钥$K_{A,B}=e(P_A, d_B)=e(Q_A,Q_B)^{sr_A}$。</li>
</ol>
<p>经过如上步骤的交互Alice和Bob即可以用协商的会话密钥通信；另一方面，Alice知道Bob的身份，但是Alice发给Bob的$P_A$中虽然含有其身份哈希值项，但是因为计算Diffie-Hellman难题假设（CDH），所以过程中BOb是不知道Alice的身份，从而保证了Alice对于Bob来说的匿名。</p>
<h4 id="方案具体构造"><a href="#方案具体构造" class="headerlink" title="方案具体构造"></a>方案具体构造</h4><h5 id="System-Setup"><a href="#System-Setup" class="headerlink" title="System Setup"></a><strong>System Setup</strong></h5><p>在系统初始化阶段，可信的初始化方初始化系统（这个地方不再是密钥产生中心初始化系统，因为要运用2PC消除密钥托管，因而密钥产生中心KGC和云服务器提供商DSC都是假定为“诚实且好奇”的）。选择双线性群$\mathbb{G}_0$，阶数为$p$，生成元为$g$。选择哈希函数$H:\left \{ 0,1 \right \}^+ \rightarrow \mathbb{G}_0$，选择单向函数$\mathbb{G}_1 \rightarrow \mathbb{Z}_p$。系统的公开参数$param=(\mathbb{G}_0, g,H_1, H_2)$。</p>
<h6 id="KGC初始化"><a href="#KGC初始化" class="headerlink" title="KGC初始化"></a>KGC初始化</h6><p>KGC随机选择指数$\beta \in \mathbb{Z}_p$，令$h=g^\beta$。KGC的主密钥和公钥分别为$PK_K=h$，$MK_K=\beta$。</p>
<h6 id="DSC初始化"><a href="#DSC初始化" class="headerlink" title="DSC初始化"></a>DSC初始化</h6><p>DSC随机选择指数$\alpha \in \mathbb{Z}_p$。DSC的主密钥和公钥分别为$PK_D=e(g,g)^\alpha$，$MK_D=g^\alpha$。DSC随机选择指数$\gamma \in \mathbb{Z}_p$，将$\gamma$保密，将$PK_D^{agree}=g^\gamma$公开以作为分享群密钥用。</p>
<h5 id="Key-Generation"><a href="#Key-Generation" class="headerlink" title="Key Generation"></a>Key Generation</h5><h6 id="属性无关密钥生成"><a href="#属性无关密钥生成" class="headerlink" title="属性无关密钥生成"></a>属性无关密钥生成</h6><p>KGC和DSC通过以下2PC协议产生用户私钥（与属性无关部分），具体如下：</p>
<ol>
<li>KGC认证一个用户$u_t$的身份时，为该用户生成一个全局一致的指数$r_t \in \mathbb{Z}_p$，这个数对于每个用户是唯一且与其他用户不同。KGC一侧需要输入的是（$r_t, \beta$），DSC一侧输入的是$\alpha$。首先KGC与DSC通过2PC计算$x=(\alpha+r_t)\beta$，然后KGC将$x$发送给DSC；</li>
<li>DSC随机选择$\tau \in \mathbb{Z}_p$，计算$A=g^{x/\tau}=g^{(\alpha+r_t)\beta/ \tau}$，将$A$发送给KGC；</li>
<li>KGC计算$B=A^{1/\beta^2}=g^{(\alpha+r_t)/(\tau \beta)}$，将$B$发送给DSC；</li>
<li>DSC最终输出用户$u_t$与属性无关的私钥部件$D=B^\tau =g^{(\alpha+r_t)/\beta}$。</li>
</ol>
<h6 id="属性有关密钥生成"><a href="#属性有关密钥生成" class="headerlink" title="属性有关密钥生成"></a>属性有关密钥生成</h6><p>给定一个用户的属性集合$S $，KGC产生属性有关的用户密钥（即属性密钥），具体如下：</p>
<p>KGC对于每一个属性$\forall j \in S $， 随机选择$r_j \in \mathbb{Z}_p$，然后计算密钥如下：</p>
<script type="math/tex; mode=display">
SK_{K,u_t}=\left( \forall j \in S : D_j=g^r\cdot H(j)^{r_j}, D_j^\prime=g^{r_j} \right).</script><p>最终用户$u_t$的密钥由这两部分构成，即</p>
<script type="math/tex; mode=display">
SK_{u_t}=\left( D=g^{\left(\alpha +r_t \right)/\beta}, \forall j \in S : D_j=g^r\cdot H(j)^{r_j}, D_j^\prime=g^{r_j} \right).</script><p>DSC输出另一个KEK密钥$SK_{u_t}^{agree}=H(ID_t)^\gamma=Q_t^\gamma$，该密钥是为了属性群密钥的密钥分发。</p>
<h5 id="Data-Encryption"><a href="#Data-Encryption" class="headerlink" title="Data Encryption"></a>Data Encryption</h5><p>数据拥有者定义一个访问结构$\mathcal{T}$（访问控制树形式），然后按如下方式进行加密：</p>
<p>针对树$\mathcal{T}$中的每一个节点$x$（包括联系属性的叶子节点），选择一个与之对应的多项式$q_x$。多项式$q_x$的的最高次数为$d_x=k_x-1$。</p>
<p>多项式的选取遵循由根节点到叶子节点（从上到下）的方式。从根节点$R$开始，选择秘密值$s \in \mathbb{Z}_p$，并设置$q_R \left(0 \right)=s$，然后随机选择其他项的次数。对于其他节点$x$，递归的设置$q_x \left( 0 \right) = q_{p\left(x \right)} \left(index\left(x \right) \right)$，至于$q_x$的其他系数随机选择。</p>
<p>记$Y$为树$\mathcal{T}$的叶子节点的集合，然后加密消息$M \in \mathbb{G}_1$，密文可以表示为：</p>
<script type="math/tex; mode=display">
CT=\left( \mathcal{T}, \widetilde{C}=Me\left ( g,g \right )^{\alpha s},C=h^s,\forall y \in Y:C_y=g^{q_y \left(0 \right )},
C_y^\prime=H \left(\lambda_y \right) ^ {q_y \left( 0  \right )} \right).</script><p>其中，$\lambda_y$表示的是叶子节点$y$对应的属性，$H \left(\cdot \right)$表示将属性映射到$\mathbb{G}_0$。</p>
<p>此阶段和CP-ABE方案中的加密阶段一致。</p>
<h5 id="Data-Re-Encryption"><a href="#Data-Re-Encryption" class="headerlink" title="Data Re-Encryption"></a>Data Re-Encryption</h5><p>此阶段DSP将重加密密文$CT$，具体如下：</p>
<ul>
<li>对于访问结构中涉及到的属性群$\left\{ G_y:y \in Y \right\}$，DSP随机选择属性群密钥$K_{\lambda_y} \in \mathbb{Z}_p$，然后重加密$CT$进而产生$CT^\prime$。</li>
</ul>
<script type="math/tex; mode=display">
CT^\prime=\left( \mathcal{T}, \widetilde{C}=Me\left ( g,g \right )^{\alpha s},C=h^s,\forall y \in Y:C_y=g^{q_y \left(0 \right )},C_y^\prime=\left(H \left(\lambda_y \right) ^ {q_y \left( 0  \right )} \right)^{K_{\lambda_y}}\right).</script><ul>
<li>选择随机数$\rho,R \in \mathbb{Z}_p$，对于$\forall u_t \in G$（此处的$G$表示所有用户组成的群），计算$x_t=H_1(e(Q_t^\rho, PK_D^{agree}))$，此处的$x_t$可以在系统初始化的时候提前计算，而且只计算一次，$x_t$相当于是在$\mathbb{Z}_p$中用户$x_t$的身份；</li>
<li>对于所有的$\forall G_y$，构造多项式函数$f^y(x)=\prod_{i=1}^m(x-x_i)=\sum_{i=0}^m a_ix^i (mod \ p)$，其中$G_y=\left\{ u_1,u_2,…,u_m \right\}$表示属性群$G_y$中有$m$个用户，记指数集合$\left\{ P_0,P_1,…,P_m\right\} = \left\{ g^{a_0},g^{a_1},…,g^{a_m}\right\}$；</li>
<li>构造$Hdr_y=\left\{ K_{\lambda_y } \cdot P_0^R, P_1^R,…, P_m^R\right\}$，公开$Hdr=(g^\rho, \forall y \in Y:Hdr_y)$。</li>
</ul>
<h5 id="Data-Decryption"><a href="#Data-Decryption" class="headerlink" title="Data Decryption"></a>Data Decryption</h5><p>密文的形式为：</p>
<script type="math/tex; mode=display">
CT^\prime=\left( \mathcal{T}, \widetilde{C}=Me\left ( g,g \right )^{\alpha s},C=h^s,\forall y \in Y:C_y=g^{q_y \left(0 \right )},C_y^\prime=\left(H \left(\lambda_y \right) ^ {q_y \left( 0  \right )} \right)^{K_{\lambda_y}}\right).</script><p>密钥的形式为：</p>
<script type="math/tex; mode=display">
SK_t=\left( D=g^{\left(\alpha +r \right)/\beta}, \forall \lambda_j \in \Lambda : D_j=g^r\cdot H(j)^{r_j}, D_j^\prime=g^{r_j} \right).</script><h6 id="属性群密钥解密"><a href="#属性群密钥解密" class="headerlink" title="属性群密钥解密"></a>属性群密钥解密</h6><p>当用户收到$Hdr$后，首先解密属性群密钥。如果用户$u_t$持有属性$\lambda_j$，那么他能解密$K_{\lambda_j}$，他可以按照如下方式解密群密钥$K_{\lambda_j}$：</p>
<ul>
<li>用户$u_t$首先计算$x_t=H_1(e(g\rho, SK_{u_t}^{agree}))$；</li>
<li>计算$K_{\lambda_y} \cdot P_0^R \cdot \prod _{i=1}^m (P_i^R)^{x_t^i}=K_{\lambda_y} \cdot g^{Rf^j(x_i)}=K_{\lambda_y}$，其中$m=|G_j|$。</li>
</ul>
<p>得到群密钥$K_{\lambda_j}$之后，用户$u_t$更新自己的私钥为：</p>
<script type="math/tex; mode=display">
SK_{u_t}=\left( D=g^{\left(\alpha +r_t \right)/\beta}, \forall \lambda_j \in \Lambda : D_j=g^r\cdot H(j)^{r_j}, D_j^\prime=(g^{r_j})^{1/K_{\lambda_j}} \right).</script><h6 id="密文解密"><a href="#密文解密" class="headerlink" title="密文解密"></a>密文解密</h6><p>首先定义一个递归的函数$DecryptNode(CT^\prime,SK,x)$（由下到上）:</p>
<ul>
<li><p>如果$x$为叶子节点，记$i=\lambda_x$。</p>
<ul>
<li><p>若$i \in \Lambda$（用户拥有属性$i$），则</p>
<script type="math/tex; mode=display">
\begin{aligned}
&DecryptNode(CT,SK,x) = \frac{e(D_i, C_x)}{e(D_i^\prime , C_x^ \prime)}= \nonumber \\ &\frac{e(g^r \cdot H(x)^{r_i}, h^{q_x(0)})}{(e(g^{r_i})^{1/K_{\lambda_x}} , (H(i)^{q_x(0)})^{K_{\lambda_x}})} = e(g,g)^{rq_x(0)}. \nonumber
\end{aligned}</script></li>
<li><p>若$i \notin \Lambda$，则定义$DecryptNode(CT,SK,x) =\perp $。</p>
</li>
</ul>
</li>
<li><p>如果$x$为非叶子节点，则$DecryptNode(CT,SK,x)$的计算规则如下：</p>
<ul>
<li><p>对于$x$节点的所有孩子节点$z$，调用$F_z = DecryptNode(CT,SK,z)$函数，记$F_z \neq \perp $的所有节点的集合为$S^ \prime$，若$|S^ \prime|&lt;k_x$，则$DecryptNode(CT,SK,x) =\perp $。</p>
</li>
<li><p>相反的话，则选取$S^ \prime$集合中任意$k_x$个元素组成集合$S_x$，按如下方式计算$DecryptNode(CT,SK,x)$：</p>
<script type="math/tex; mode=display">
\begin{aligned}
&F_z=\prod _{z \in S_x} F_z ^{\Delta _{i,S_x^ \prime} (0)} \nonumber \\
&=\prod _{z \in S_x} (e(g,g) ^ {rq_z(0)}) ^ {\Delta _{i,S_x^ \prime} (0)} \nonumber \\
&=\prod _{z \in S_x} (e(g,g) ^ {rq_{p(z)}(index(z))}) ^ {\Delta _{i,S_x^ \prime} (0)} \nonumber \\
&=\prod _{z \in S_x} (e(g,g)  ^ {r \cdot q_x(i) \cdot \Delta _{i,S_x^ \prime} (0)} \nonumber \\
&=e(g,g)^{rq_x(0)}.\nonumber
\end{aligned}</script></li>
</ul>
</li>
</ul>
<p>从递归函数的形式上看，尽管叶子节点和非叶子节点的具体计算方式不一样，但是有着统一的形式，因此只要能够依次满足条件地计算出树中适当个数的节点秘密值，就可以解密根节点的秘密值。即当属性集合$S$满足访问结构$\mathcal{T}$，那么就可以解密得到:</p>
<script type="math/tex; mode=display">
A = DecryptNode(CT,SK,r)=e(g,g)^{rq_R(0)} = e(g,g)^{rs}.</script><p>最后即可解密成功：</p>
<script type="math/tex; mode=display">
\widetilde{C}/(e(C,D)/A) = \widetilde{C}/(e(h^s,g^{((\alpha + r)/\beta )})/e(g,g)^{rs}) = M.</script><h5 id="Attribute-Revocation"><a href="#Attribute-Revocation" class="headerlink" title="Attribute Revocation"></a>Attribute Revocation</h5><p>假设属性群$G_i$中有成员变动（某用户撤销了属性$\lambda_i$），则需要更新密文和密钥，具体如下：</p>
<ul>
<li>DSC随机选择一个秘密值$s^\prime \in \mathbb{Z}_p$，然后再随机选取一个不一样的群密钥$K_{\lambda_i}^\prime \in \mathbb{Z}_p$，然后重加密密文得到新密文：</li>
</ul>
<script type="math/tex; mode=display">
\begin{aligned}
& CT^\prime=\left( \mathcal{T}, \widetilde{C}=Me\left ( g,g \right )^{\alpha (s+s^\prime)},C=h^{s+s^\prime},C_i=g^{q_i \left(0 \right )+s^\prime},C_i^\prime=\left(H \left(\lambda_i \right) ^ {q_i \left( 0  \right )+s^\prime} \right)^{K_{\lambda_y}^\prime}, \nonumber \\
 \forall y \in Y\setminus \left\{i \right\}:C_y=g^{q_y \left(0 \right )+s^\prime},C_y^\prime=\left(H \left(\lambda_y \right) ^ {q_y \left( 0  \right )+s^\prime} \right)^{K_{\lambda_y}}\right). \nonumber
\end{aligned}</script><ul>
<li>DSC针对属性$\lambda_i$，重新构造多项式$f^i(x)$，只不过这个时候的属性群是更新后的属性群，去除了撤销属性$\lambda_i$的成员，增加了新持有属性$\lambda_i$的成员。然后根据新的属性群密钥，重新计算生成$Hdr_i$，并公开最新的$Hdr$为：$Hdr = (g^\rho, Hdr_i, \forall y \in Y \setminus \left\{i \right\}:Hdr_y)$。</li>
</ul>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>Hur2-ABE和Hur1-ABE的构造思路很相近，都是构建在最初的CP-ABE方案之上，都是为了解决属性撤销的难题，只不过属性撤销实现的方式不同，具体表现为Hur1-ABE是借助KEK树的技巧实现的，而Hur2-ABE是通过多项式技巧实现的，都是基于属性群的实现。不同的是，Hur2-ABE还利用2PC让KGC和DSC交互来产生用户私钥中与属性无关的部件，从而消除密钥托管。然而，不管是Hur1-ABE还是Hur2-ABE，都不能抵抗一种共谋攻击，即属性撤销用户与未撤销用户之间的共谋，这是因为如果未撤销的用户直接将属性群密钥泄露给撤销用户，那么属性撤销用户就可以绕过计算群密钥的限制而得到群密钥，进而更新自己的私钥到最新版解密密文，因此原文中加入了不存在这种攻击的假设。这两种经典的撤销手段给了ABE的属性撤销机制良好的启发作用，值得回味。</p>
<p><span name="ref1">J. Hur and D. K. Noh, “Attribute-based Access Control with Efficient Revocation in Data Outsourcing Systems,” IEEE Transactions on Parallel and Distributed Systems, vol. 22, no. 7, pp. 1214–1221, Jul. 2011.</span></p>
<p><span name="ref2">J. Hur, “Improving Security and Efficiency in Attribute-Based Data Sharing,” IEEE Transactions on Knowledge and Data Engineering, vol. 25, no. 10, pp. 2271-2282, Oct. 2013.</span></p>
]]></content>
      <categories>
        <category>属性基加密</category>
      </categories>
      <tags>
        <tag>属性基加密</tag>
        <tag>属性撤销</tag>
        <tag>共谋攻击</tag>
      </tags>
  </entry>
  <entry>
    <title>MA-ABE</title>
    <url>/2021/04/13/MA-ABE/</url>
    <content><![CDATA[<h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><p>在前面提到的Hur1-ABE和Hur2-ABE方案中都提到了密钥托管和共谋攻击的问题。密钥托管说的是密钥产生中心（KGC）为用户计算生成私钥，从而有解密任何密文的能力；而共谋攻击指的是几个实体试图“勾结起来”将自己的属性拼拼凑凑以满足访问结构达到解密密文的目的。其实在原始CP-ABE方案提出的同一年（2007年），就有学者关注这两个问题，并给出了自己的解决方案，这就是Chase的MA-ABE<sup><a href="ref1">1</a></sup>方案。</p>
<span id="more"></span>
<p>针对密钥托管的问题，MA-ABE方案将一个密钥产生中心（KGC）“分裂为”多个属性机构，每个属性机构只是负责管理与该属性有关的用户，属性机构之间没有任何关联，管理的属性集合之间也没有交集；针对共谋攻击的问题，MA-ABE方案首次提出GID的概念，即针对每个用户以及每个属性机构分配一个全局唯一的身份标识符，用户私钥的的产生与这些唯一的标志相关联。那么我们来看一看MA-ABE方案是怎么构造的吧！</p>
<h4 id="方案构造"><a href="#方案构造" class="headerlink" title="方案构造"></a>方案构造</h4><p>再具体描述方案的构造之前，首先说明一下系统所用的符号解释以及系统假设：</p>
<ul>
<li>系统属性域可划分为$K$个互不相交的属性集合，每一个集合的属性由对应的属性机构所管理。系统中有一个可信的中心机构CA，只不过该机构不负责管理任何属性。</li>
<li>记$\mathcal{A}_u$为用户$u$的属性集合，$\mathcal{A}_C$为密文中的属性集合；$\mathcal{A}_u^k$为$\mathcal{A}_u$中由属性机构$k$管理的属性集合，$\mathcal{A}_C^k$为$\mathcal{A}_C$中由属性机构$k$管理的属性集合。</li>
</ul>
<p>因为MA-ABE方案是将Sahai和Waters的FIBE（或者说门限ABE）方案拓展到多个权威机构，因此MA-ABE这篇文献非常“耐心”地一步步引导读者如何构建MA-ABE方案，这无疑说是一览ABE构思细节的“福利”。下面按照文献的思路一步步介绍。</p>
<h5 id="STEP-ONE"><a href="#STEP-ONE" class="headerlink" title="STEP ONE"></a>STEP ONE</h5><h6 id="方案构造前思忖"><a href="#方案构造前思忖" class="headerlink" title="方案构造前思忖"></a>方案构造前思忖</h6><p>根据之前说的拉格朗日插值算法可知，给定一个$d-1$次多项式的$d$个点$p(1),p(2),…,p(d)$，那么我们可以恢复出多项式$p(x)$进而计算任何指定的值$p(i)$。同样的，如果我们给定$d$个数，分别为$g^{p(1)},g^{p(2)},…,g^{p(d)}$，我们仍然可以同样的计算得到$g^{p(x)}$，进而计算任何给定$i$所对应的$g^{p(i)}$。</p>
<p>这给我们构建ABE方案一些启示：如果某个用户拥有属性$i$，那么他的私钥就含有$g^{p(i)}$，其中多项式$p$的次数为$d-1$。我们可以通过计算$g^{p(0)}m$来给消息$m$进行加密，只要任何用户有至少$d$个属性即可通过插值的方式解密$m$。然而这样不能防止共谋攻击，因为只要几个用户通过“拼凑”自己的属性使得总属性个数多于$d$，仍然可以解密。那么自然想到的是，针对一个用户$u$，选择某个特定的多项式$p_u$，然后再分发密钥，只不过所有的多项式必须在0点处相交，即$y=p_1(0)=…=p_i(0)$。下面基于这种思路构建STEP ONE方案。</p>
<h6 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h6><p>从$\mathbb{Z}_p$中随机选择主密钥$y$。</p>
<h6 id="SK-Gen"><a href="#SK-Gen" class="headerlink" title="SK Gen"></a>SK Gen</h6><p>对于用户$u$，随机选择多项式$p$使得$p(0)=y$，然后生成用户$u$的密钥为$SK=\left\{ D_i = g^{p(i）} \right\}_{\forall i \in \mathcal{A}_u}$。</p>
<h6 id="Encryption"><a href="#Encryption" class="headerlink" title="Encryption"></a>Encryption</h6><p>计算$E=g^ym$。</p>
<h6 id="Decryption"><a href="#Decryption" class="headerlink" title="Decryption"></a>Decryption</h6><p>如果用户$u$有至少$d$个密钥部件，那么他可以用其中的$d$个通过插值计算$Y=g^{p(0)}=g^y$，然后$m=E/Y$。</p>
<h5 id="STEP-TWO"><a href="#STEP-TWO" class="headerlink" title="STEP TWO"></a>STEP TWO</h5><h6 id="方案构造前思忖-1"><a href="#方案构造前思忖-1" class="headerlink" title="方案构造前思忖"></a>方案构造前思忖</h6><p>如果采用Step One中的方案，那么意味着任何用户只要有$d$个属性，就可以解密密文，而我们希望的是在给定的属性集合范围内满足至少$d$个属性才能够解密。为了达到这个需求，我们得借助双线性映射$e$（对于$g\in \mathbb{G}_1$，$a,b \in \mathbb{Z}_q$，则$e(g^a, g^b)=e(g,g)^{ab}$）。</p>
<p>现在假定我们不再是针对每个属性$i$分发属性密钥$g^{p(i)}$，而是选择一个随机值$t_i$，然后分发属性密钥$g^{p(i)/t_i}$。如果用户知道至少$d$个$g^{t_i}$，那么他可以计算至少$d$个$e(g,g)^{p(i)}$，然后通过插值得到$e(g,g)^{p(0)}$。假如消息$m$加密为$e(g,g)^{p(0)}m$，那么他就可以解密。这样，加密者就可以指定是哪些属性可以提供$g^{t_i}$。下面基于这种思路构建Step Two方案。</p>
<h6 id="Init-1"><a href="#Init-1" class="headerlink" title="Init"></a>Init</h6><p>首先从$\mathbb{Z}_p$中随机选择$y,t_1,…,t_n$，令$Y=e(g,g)^y$。</p>
<h6 id="SK-Gen-1"><a href="#SK-Gen-1" class="headerlink" title="SK Gen"></a>SK Gen</h6><p>随机选择一个多项式$p$使得$p(0)=y$，然后生成密钥为$SK=\left\{ D_i = g^{p(i)/t_i} \right\}_{\forall i \in \mathcal{A}_u}$。</p>
<h6 id="Encryption-1"><a href="#Encryption-1" class="headerlink" title="Encryption"></a>Encryption</h6><p>计算$E=Ym$以及$\left\{E_i=g^{t_i} \right\}_{\forall i \in \mathcal{A}_C}$。</p>
<h6 id="Decryption-1"><a href="#Decryption-1" class="headerlink" title="Decryption"></a>Decryption</h6><p>如果用户$u$有至少$d$个$i \in \mathcal{A}_C \cap \mathcal{A}_u$，那么他可以用其中的$d$个计算$e(E_i,D_i)=e(g,g)^{p(i)}$，通过插值计算$Y=e(g,g)^{p(0)}=e(g,g)^y$，然后$m=E/Y$。</p>
<h5 id="STEP-THREE"><a href="#STEP-THREE" class="headerlink" title="STEP THREE"></a>STEP THREE</h5><h6 id="方案构造前思忖-2"><a href="#方案构造前思忖-2" class="headerlink" title="方案构造前思忖"></a>方案构造前思忖</h6><p>STEP TWO方案中存在许多问题。首先，我们需要多次加密消息，但不希望每次加密都重新运行一遍系统。然而STEP TWO中一旦用户恢复出$Y=e(g,g)^{p(0)}$，他便可以解密该系统后边加密的任何消息了，而不管他的属性是否满足要求。</p>
<p>如果加密消息的时候我们不是给定$e(g,g)^{p(0)}m$，而是给定$e(g,g)^{p(0)s}m$，这里的$s$是每次加密消息时不同的值呢？这样的话，我们的密文部件相应地由$\left\{E_i=g^{t_i} \right\}_{ \forall i \in \mathcal{A}_C}$变为$\left\{E_i=g^{t_is} \right\}_{ \forall i \in \mathcal{A}_C}$，这样的话，上述流程仍能保证只要用户有足够的属性，他仍能计算得到$e(g,g)^{p(0)s}$，从而解密密文。下面基于这种思路构建STEPTHREE方案，也即重构FIBE方案。</p>
<h6 id="Init-2"><a href="#Init-2" class="headerlink" title="Init"></a>Init</h6><p>首先从$\mathbb{Z}_p$中随机选择$y,t_1,…,t_n$。</p>
<h6 id="PK-Gen"><a href="#PK-Gen" class="headerlink" title="PK Gen"></a>PK Gen</h6><p>$T_1=g^{t_1}, …,T_n=g^{t_n}$，$Y=e(g,g)^y$，$PK=\left\{ T_i\right\}_{1\leq i\leq n},Y$。</p>
<h6 id="SK-Gen-2"><a href="#SK-Gen-2" class="headerlink" title="SK Gen"></a>SK Gen</h6><p>随机选择一个多项式$p$使得$p(0)=y$，然后生成密钥为$SK=\left\{ D_i = g^{p(i)/t_i} \right\}_{\forall i \in \mathcal{A}_u}$。</p>
<h6 id="Encryption-2"><a href="#Encryption-2" class="headerlink" title="Encryption"></a>Encryption</h6><p>计算$E=Y^sm=e(g,g)^{ys}m$以及$\left\{E_i=g^{t_is} \right\}_{\forall i \in \mathcal{A}_C}$。</p>
<h6 id="Decryption-2"><a href="#Decryption-2" class="headerlink" title="Decryption"></a>Decryption</h6><p>如果用户$u$有至少$d$个$i \in \mathcal{A}_C \cap \mathcal{A}_u$，那么他可以用其中的$d$个计算$e(E_i,D_i)=e(g,g)^{p(i)s}$，通过插值计算$Y^s=e(g,g)^{p(0)s}=e(g,g)^{ys}$，然后$m=E/Y^s$。</p>
<h5 id="STEP-FOUR"><a href="#STEP-FOUR" class="headerlink" title="STEP FOUR"></a>STEP FOUR</h5><h6 id="方案构造前思忖-3"><a href="#方案构造前思忖-3" class="headerlink" title="方案构造前思忖"></a>方案构造前思忖</h6><p>我们现在考虑多个属性机构的情况。既然我们把属性域划分为$K$个互不相交的属性集合，每个属性集合有一个属性机构管理，那么按照STEP THREE的思路，我们针对每一个属性机构$k$，都构建一个多项式，我们将$y_k$作为属性机构$k$所需要的分享的秘密值，这样的话如果用户$u$拥有足够多的属性机构$k$管理的属性，那么他就可以计算出$e(g,g)^{y_ks}$，而对于每个属性机构来说，设置系统要分享的秘密值$y_0$，使得$\sum y_k = y_0$，我们最终可以得到$e(g,g)^{y_0s}$，将消息$m$加密为$e(g,g)^{y_0s}m$，那么我们满足条件就可以解密密文，符合预期结果。下面基于这种思路构建STEP FOUR方案。</p>
<h6 id="System"><a href="#System" class="headerlink" title="System"></a>System</h6><ol>
<li><strong>Init</strong>. 首先选定$y_1,…,y_k$，$\left\{t_{k,i} \in \mathbb{Z}_q \right\}_{i=1…n,k=1…K}$，令$y_0=\sum _{k=1}^Ky_k$。</li>
<li><strong>System PK</strong>. $Y_0=e(g,g)^{y_0}$。</li>
</ol>
<h6 id="Attribute-Authority-k"><a href="#Attribute-Authority-k" class="headerlink" title="Attribute Authority $k$"></a>Attribute Authority $k$</h6><ol>
<li><strong>Authority Secret Key</strong>. FIBE方案的私钥一样：$y_k, t_{k,1},…,t_{k,n}$。</li>
<li><strong>Authority Public Key</strong>. FIBE方案的公钥一样：$T_{k,1}, …,T_{k,n}$，其中$T_{k,i}=g^{t_{k,i}}$。</li>
<li><strong>Secret Key for User $u$ from authority $k$</strong>. 选择$d-1$阶多项式$p$，其中$p(0)=y_k$。用户私钥为：$\left\{ D_{k,i} = g^{p(i)/t_{k,i}} \right\}_{\forall i \in \mathcal{A}_u}$ 。</li>
</ol>
<h6 id="Encryption-for-attribute-set-mathcal-A-C"><a href="#Encryption-for-attribute-set-mathcal-A-C" class="headerlink" title="Encryption for attribute set $\mathcal{A}_C$"></a>Encryption for attribute set $\mathcal{A}_C$</h6><p>选择随机数$s \in \mathbb{Z}_p$，计算$E=Y_0^sm$以及$\left\{E_{k,i}=T_{k,i}^s \right\}_{\forall i \in \mathcal{A}_C^k,\forall k}$。</p>
<h6 id="Decryption-3"><a href="#Decryption-3" class="headerlink" title="Decryption"></a>Decryption</h6><p>对于每个属性机构$k$，针对$d$个属性$i$，其中$i$满足$i \in \mathcal{A}_C^k \cap \mathcal{A}_u$，计算$e(E_{k,i}, D_{k,i})=e(g,g)^{p(i)s}$。通过插值得到$Y_k^s=e(g,g)^{p(0)s}=e(g,g)^{y_ks}$，进而得到$\prod _{k=1}^K Y_k^s = Y_0^s$，然后$m=E/Y_0^s$。</p>
<h5 id="Final-MA-ABE"><a href="#Final-MA-ABE" class="headerlink" title="Final MA-ABE"></a>Final MA-ABE</h5><h6 id="方案构造前思忖-4"><a href="#方案构造前思忖-4" class="headerlink" title="方案构造前思忖"></a>方案构造前思忖</h6><p>STEP FOUR方案依然存在一个问题。假如我们有$K$个用户，每个用户都能满足一个对应的属性机构的访问要求，然而却没有任何其他属性机构管理的属性，那么这$K$个用户共谋起来仍然能够解密密文，也就是说，$K$个上述用户的组合和一个能够解密密文的合法用户看起来是不可分辨的。为解决这个问题，就提出了GID的概念，将每一个用户与唯一的标识符相关联。</p>
<p>既然我们可以用GID区分不同的用户了，我们需要一些方式来确保不同用户并不能组合来自不同权威机构的密钥，进而解密密文。假设每个权威机构$k$为每个用户选择一个不同的随机数$y_{k,u}$，令$y_{u,0}$为用户$u$的主密钥，那么用户$u$得到$e(g,g)^{y_{k,u}s}$并与用户$u\prime$分享，用户$u\prime$得不到任何关于他主密钥$e(g,g)^{y_{0.u\prime}s}=\prod _{i=1}^Ke(g,g)^{y_{0.u\prime}s}$，因为$y_{k,u}$与$y_{k,u\prime}$是相互独立的。</p>
<p>然而如果所有的属性机构选择$y_{k,u}$独立，那么我们如何保证$\sum_{k=1}^Ky_{k,u}=y_0$对于所用用户都成立呢？似乎需要这些机构之间通信来解决协调一致，但是这又与设计的初衷相违背，原来设想这些机构是不需要沟通的。因此，方案中提到了CA的概念，即一个可信的中心机构，它并不管理属性，它的作用是“协调”各属性机构密钥状态，使得不同的合法用户最终都能计算得到“公共的中间值”，进而解密密文。下面基于这种思路构建最终的MA-ABE。</p>
<h6 id="System-1"><a href="#System-1" class="headerlink" title="System"></a>System</h6><ol>
<li><strong>Init</strong>. 选定素数阶乘法循环群$\mathbb{G},\mathbb{G}_1$，双线性映射$e:\mathbb{G} \rightarrow \mathbb{G}_1$，$g \in \mathbb{G}$为生成元。为每一个属性机构选择种子$s_1,…,s_K$，从$\mathbb{Z}_q$中选择$y_0,\left\{t_{k,i} \in \mathbb{Z}_q \right\}_{i=1…n,k=1…K}$。</li>
<li><strong>System PK</strong>. $Y_0=e(g,g)^{y_0}$。</li>
</ol>
<h6 id="Attribute-Authority-k-1"><a href="#Attribute-Authority-k-1" class="headerlink" title="Attribute Authority $k$"></a>Attribute Authority $k$</h6><ol>
<li><strong>Authority Secret Key</strong>. $s_k, t_{k,1},…,t_{k,n}$。</li>
<li><strong>Authority Public Key</strong>. $T_{k,1}, …,T_{k,n}$，其中$T_{k,i}=g^{t_{k,i}}$。</li>
<li><strong>Secret Key for User $u$ from authority $k$</strong>. 令$y_{k,u}=F_{s_k}(u)$，其中$F$为伪随机函数。选择$d-1$阶多项式$p$，其中$p(0)=y_{k,u}$。用户私钥为：$\left\{ D_{k,i} = g^{p(i)/t_{k,i}} \right\}_{\forall i \in \mathcal{A}_u}$ 。</li>
</ol>
<h6 id="Central-Authority"><a href="#Central-Authority" class="headerlink" title="Central Authority"></a>Central Authority</h6><ol>
<li><strong>Central  Authority Secret Key</strong> 所有属性机构$k$的种子$s_k$，$y_0$。</li>
<li><strong>Secret Key for User $u$</strong> 对于所有的属性机构$k$，令$y_{k,u}=F_{s_k}(u)$。私钥：$D_{CA}=g^{y_0-\sum _{k=0}^Ky_{k,u}}$。</li>
</ol>
<h6 id="Encryption-for-attribute-set-mathcal-A-C-1"><a href="#Encryption-for-attribute-set-mathcal-A-C-1" class="headerlink" title="Encryption for attribute set $\mathcal{A}_C$"></a>Encryption for attribute set $\mathcal{A}_C$</h6><p>选择随机数$s \in \mathbb{Z}_p$，计算$E=Y_0^sm$，$E_{CA}=g^s$以及$\left\{E_{k,i}=T_{k,i}^s \right\}_{\forall i \in \mathcal{A}_C^k,\forall k}$。</p>
<h6 id="Decryption-4"><a href="#Decryption-4" class="headerlink" title="Decryption"></a>Decryption</h6><p>对于每个属性机构$k$，针对$d$个属性$i$，其中$i$满足$i \in \mathcal{A}_C^k \cap \mathcal{A}_u$，计算$e(E_{k,i}, D_{k,i})=e(g,g)^{p(i)s}$，通过插值得到$Y_{k,u}^s=e(g,g)^{p(0)s}=e(g,g)^{y_{k,u}s}$。对于每个属性机构$k$，计算$Y_{CA}^s=e(E_{CA},D_{CA})$。进而得到$Y_{CA}^s \cdot \prod _{k=1}^K Y_k^s = Y_0^s$，然后$m=E/Y_0^s$。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>以上根据Chase的论文，一步步引导，最终得到MA-ABE的完整构造。从这一路引导可以看出，为了解决密钥托管的问题，MA-ABE的核心思想是将一个KGC分裂成多个不需要“沟通”的多个权威机构，而构造中又遇到了共谋攻击问题，为了解决这个问题，引入了全局GID的概念，而将此概念运用到方案中又出现方案“协调性”问题，是引入全局可信中心机构CA来解决的。从整体上讲，我们可以发现，MA-ABE是FIBE的多层次拓展，FIBE只是运用一次拉格朗日插值，而MA-ABE可以看作是两层插值。MA-ABE为多个权威机构的ABE方案开辟了先河，而GID的概念也是广泛运用到后续的研究中。然而MA-ABE还是有一个全局可信的CA存在，实质上还是没有解决密钥托管的问题，Chase<sup><a href="ref2">2</a></sup>在后续的文章中有继续关注这个问题。</p>
<p><span name="ref1">M. Chase, “Multi-authority attribute based encryption,” in Proc. TCC’07, 2007, pp. 515–534, Springer.</span></p>
<p><span name="ref2">M. Chase and S.S. M.Chow,“Improvingprivacy andsecurity in multi-authority attribute-based encryption,” in Proc. CCS’09, 2009, pp. 121–130, ACM.</span></p>
]]></content>
      <categories>
        <category>属性基加密</category>
      </categories>
      <tags>
        <tag>属性基加密</tag>
        <tag>多个属性机构</tag>
        <tag>共谋攻击</tag>
      </tags>
  </entry>
  <entry>
    <title>O-ABE</title>
    <url>/2021/04/14/O-ABE/</url>
    <content><![CDATA[<h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><p>前面的几篇文章都关注在密钥托管、属性撤销以及共谋攻击这几个方面。诚然这些方面是设计ABE算法时需要考虑的地方。我们现在回想一下前面介绍的这些ABE方案，其中不管是基于什么难题，异或是访问结构是访问控制树还是线性秘密共享方案，所构造的ABE方案都有一个共同的特点，那就是解密所需要的操作数量与密文中属性个数成正比。这也就意味着，密文中的属性越多，解密的操作数就越多。而对于一些存储计算资源受限的设备，就无法胜任解密的工作。</p>
<span id="more"></span>
<p>Green和Waters<sup><a href="ref1">1</a></sup>（对，还是那个大佬）为了减轻用户端解密的开销，首次提出了外包ABE的原型（这也是本文取名O-ABE的原因）。方案的设想是，用户在解密的时候，不将全部的操作由自己来弄，而是将绝大部分的工作量委托给第三方代理，让第三方算出大部分的结果之后再返回结果，而用户实际的计算将会很少。设想是美好的，但是这其中有一个问题，那就是第三方如何能帮你计算出有效的部分结果，而这个结果对于他而言，完全不能得到密文有关的任何信息。</p>
<p>那么O-ABE是如何做到既能外包大部分操作，又能保证密文的安全性呢？答案是方案中用到了所谓的“盲化”技术，即在由KGC生成用户私钥之后，用户是可以拿着私钥解密密文的，但是碍于操作量大，用户可能无法完成，因此他将自己的私钥运用“盲化“技术衍生为一个转换密钥，而第三方机构正是由这个密钥算得解密的一部分。而这个转换密钥在对于第三方机构来说一点帮助都没有，解密之后也看不到明文是什么样的。下面看看O-ABE具体是怎样构造的吧！</p>
<h4 id="具体构造"><a href="#具体构造" class="headerlink" title="具体构造"></a>具体构造</h4><h5 id="Setup-lambda-U"><a href="#Setup-lambda-U" class="headerlink" title="Setup($\lambda,U$)"></a><strong>Setup($\lambda,U$)</strong></h5><p>Setup算法将系统的安全参数$\lambda$和系统属性域$U$作为输入。选择一个$p$阶乘法循环群$\mathbb{G}$，生成元为$g$，选择一个哈希函数$F$将$\left\{0,1\right\}^+$映射到$\mathbb{G}$。选择指数$\alpha, a \in \mathbb{Z}_p$。系统的主密钥为$MSK=(g^\alpha,a)$，系统的公共参数为$PK=(g,e(g,g)^\alpha, g^a,F)$。</p>
<h5 id="Encrypt-PK-mathcal-M-M-rho"><a href="#Encrypt-PK-mathcal-M-M-rho" class="headerlink" title="Encrypt($PK,\mathcal{M},(M,\rho)$)"></a><strong>Encrypt($PK,\mathcal{M},(M,\rho)$)</strong></h5><p>Encrypt算法将$PK$和消息$\mathcal{M}$作为输入。选择一个线性秘密共享方案的访问结构$(M,\rho)$，函数$\rho$将矩阵$M \in \mathbb{Z}_p^{l\times n}$的每一行映射到一个属性。选择随机向量$\overrightarrow{v}=(s,v_2,…,v_n) \in \mathbb{Z}_p^n$，$\forall i \in [l]$，计算$\lambda _i = \overrightarrow{v}M_i$，其中$M_i$为矩阵$M$的第$i$行。随机选择$r_1,…,r_l \in \mathbb{Z}_p$，然后加密$\mathcal{M}$得到密文为</p>
<script type="math/tex; mode=display">
\begin{aligned}
C=((M, \rho), \mathcal{M} \cdot e(g,g)^{\alpha s}, C^ \prime =g^s, \nonumber \\
\forall i \in [l]； C_i=g^{a\lambda_i} \cdot F(\rho(i))^{-r_i},D_i=g^{r_i}). \nonumber
\end{aligned}</script><h5 id="KeyGen-MSK-S"><a href="#KeyGen-MSK-S" class="headerlink" title="KeyGen($MSK,S$)"></a><strong>KeyGen($MSK,S$)</strong></h5><p>KeyGen算法将$MSK$和用户的属性集合$S$作为输入。首先选择随机数$t^\prime$，然后得到密钥</p>
<script type="math/tex; mode=display">
SK^\prime = (K^\prime = g^\alpha g^{at^\prime},L^\prime = g^{t^\prime},
\left\{ K_x^\prime = F(x)^{t^\prime} \right\}_{x \in S}).</script><p>然后选择随机数$z \in \mathbb{Z}_p$，设置转换密钥为</p>
<script type="math/tex; mode=display">
TK = (K={K^\prime}^{1/z} = g^{(\alpha /z)} g^{a(t^\prime/z)}=g^{(\alpha /z)}g^{at},L={L^\prime}^{1/z} = g^{t^\prime /z} = g^t,
\left\{ K_x \right\}_{x \in S}=\left\{ {K_x^\prime}^{1/z} \right\}_{x \in S}).</script><p>用户私钥为$SK=(z,TK)$。</p>
<h5 id="Transform-TK-CT"><a href="#Transform-TK-CT" class="headerlink" title="Transform($TK,CT$)"></a><strong>Transform($TK,CT$)</strong></h5><p>Transfrom算法输入转换密钥$TK=(K,L,\left\{  K_x\right\}_{x \in S})$和密文$CT=(C,C^\prime, \left\{ C_i, D_i\right\}_{i \in [l]})$。如果$S$不满足访问结构，那么直接输出$\perp $。如果$S$满足访问结构，定义索引集合$I \sqsubset \left\{1,2…,l \right\}$为$I=\left\{ i:\rho(i) \in S \right\}$。然后存在一系列的常数$\left\{\omega_i \in \mathbb{Z}_p \right\}_{i \in I}$使得$\sum_{i \in I}\omega_i \lambda_i=s$。然后计算</p>
<script type="math/tex; mode=display">
\begin{aligned}
&e(C^\prime,K)/( (e(\prod _{i \in I} C_i^{\omega _i},L) \prod _{i \in I} e(D_i^{\omega _i},K_{\rho(i)})))= \nonumber\\
&e(g,g)^{\alpha s /z}e(g,g)^{ast}/( \prod _{i \in I} e(g,g)^{ta\lambda _i \omega _i})=e(g,g)^{\alpha s /z} \nonumber
\end{aligned}</script><p>然后输出半解密的密文$CT^\prime=(C,e(g,g)^{\alpha s /z})$。</p>
<h5 id="Decrypt-SK-CT"><a href="#Decrypt-SK-CT" class="headerlink" title="Decrypt($SK,CT$)"></a><strong>Decrypt($SK,CT$)</strong></h5><p>Decrypt算法输入用户私钥$SK=(z,TK)$和密文$CT$。如果密文没有半解密，那么将调用Transfrom算法，如果Transfrom算法输出$\perp$，则Decrypt算法输出$\perp$。否则，用户会拿到半解密密文$(T_0.T_1)$，解密只需计算$T_0/T_1^z=\mathcal{M}$。</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>其实我们通过O-ABE算法的构造会发现，其中大部分步骤和Waters的2SPSR方案中的第一个是差不多的，只不过多了密文转换Transfrom这个步骤。该外包ABE的实现运用的盲化的技巧，首先KGC会为用户生成正确的密钥，然后用户随机选择一个秘密值来“随机化自己的私钥”，称之为转换密钥，将此密钥发送给第三方委托半解密密文，用户最终得到的密文已经“很短”了，只需要常数级别的操作即可恢复出密文，这便是外包ABE的大体思路。O-ABE为减小密文解密开销提供了一种技巧，这种技巧广泛地被运用到ABE方案的构建上，后边要介绍的DAC-MACS<sup><a href="ref2">2</a></sup>便运用了这一技巧。</p>
<p><span name="ref1">M. Green, S. Hohenberger, and B. Waters, “Outsourcing the Decryption of ABE Ciphertexts,” in <em>Proceedings of the 20th USENIX conference on Security</em>, San Francisco, CA, USA, 2011.</span></p>
<p><span name="ref1">K. Yang, X. H. Jia, K. Ren, B. Zhang, and R. T. Xie, “DAC-MACS: Effective Data Access Control for Multi-authority Cloud Storage Systems,” <em>IEEE Transactions on Information Forensics and Security</em>, vol. 8, no.11, pp. 1790-1801, Nov. 2013.</span>&gt;</p>
]]></content>
      <categories>
        <category>属性基加密</category>
      </categories>
      <tags>
        <tag>属性基加密</tag>
        <tag>外包解密</tag>
      </tags>
  </entry>
  <entry>
    <title>密文策略属性基加密</title>
    <url>/2021/04/09/%E5%AF%86%E6%96%87%E7%AD%96%E7%95%A5%E5%B1%9E%E6%80%A7%E5%9F%BA%E5%8A%A0%E5%AF%86/</url>
    <content><![CDATA[<h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><p>千呼万唤，在前面的一些知识的铺垫中，终于引来了我们的主角：属性基加密（ABE）。都知道属性基加密的思想是让密文和密钥与属性集合和访问结构产生关联，当且仅当属性集合满足访问结构的时候，方能解密成功。那么根据这其中两两的对应关系，又可以将属性基加密分为两类，即密钥策略属性基加密<sup><a href="ref1">1</a></sup>（KP-ABE）和密文策略属性基加密<sup><a href="ref2">2</a></sup>（CP-ABE）。<br><span id="more"></span></p>
<ul>
<li><strong>KP-ABE:</strong> 用户的密钥中蕴含访问结构（访问策略），密文中对应着一系列属性集合，当且仅当密文的属性集合满足用户密钥的访问结构时，用户才能解密成功。细想下来，用户是主体，只有特定的密文才能与之匹配，从而解密。</li>
<li><strong>CP-ABE:</strong> 用户的密钥对应着一系列属性的集合，密文中蕴含着访问结构（策略），当且仅当用户的属性集合满足密文的访问结构时，用户才能解密成功。细想下来，密文是主体，只有特定的密钥才能与之匹配，从而解密。</li>
</ul>
<p>二者对比可以发现，CP-ABE中数据拥有者（加密明文得到密文的人）可以根据自己的需求，定义合适的访问结构，让他所期待的一群用户能够解密，这正好适合构建云环境或者雾环境中数据的安全共享方案，描述的是一对多、多对多的数据共享场景。因此下面着重介绍CP-ABE（后面的文章也都是CP-ABE方案）。</p>
<h4 id="安全模型"><a href="#安全模型" class="headerlink" title="安全模型"></a>安全模型</h4><p><strong>Setup</strong> 挑战者运行Setup算法，将系统的公共参数$PK$给攻击者。</p>
<p><strong>Phase 1</strong>攻击者对一系列的属性集合$S_1,S_2,…,S_{q_1}$进行密钥问询。</p>
<p><strong>Challenge</strong>攻击者提交两个等长的明文$M_0$和$M_1$，此外，攻击者提交一个他希望挑战的访问结构$\mathbb{A}^+$，其中要求Phase 1阶段问询的属性集合$S_1,S_2,…,S_{q_1}$都不满足访问结构$\mathbb{A}^+$。挑战者抛掷一枚硬币$b \in \left \{ 0,1 \right \}$，然后用$\mathbb{A}^+$加密$M_b$。最后，挑战者将密文$CT^+$交给攻击者。</p>
<p><strong>Phase 2 </strong> Phase 1阶段重复，但是问询的属性集合$S_{q_1+1},…,S_q$还是不能满足访问结构$\mathbb{A}^+$。</p>
<p><strong>Guess</strong> 攻击者给出$b$的猜想$b^\prime$。</p>
<p>定义上述交互游戏中攻击者的优势为$Pr\left [ {b}’-b \right ]-\frac{1}{2}$。</p>
<p>上述的攻击者和挑战者的游戏在模糊身份基加密中有所介绍，但是不同的是：模糊身份基加密中是选择身份模型（selective-ID），而属性基加密中是选择集合模型（selective-set）。而且上述模型有两个地方需要注意：</p>
<ul>
<li>以上模型没有Init阶段（在模糊身份基加密的模型中有init阶段），称之为选择明文攻击下不可区分安全（IND-CPA）。如果在Init阶段攻击者声明想要挑战的访问结构，则称之为选择安全模型。很显然，选择安全模型描述的安全性弱一些。</li>
<li>若是在Phase 1阶段还适应性地查询密文，则称之为适应性选择密文攻击安全模型1（CCA1），若是继续在Phase 2阶段还适应性地查询密文，则称之为适应性选择密文攻击安全模型2（CCA2)。很显然，就安全性而言，IND-CPA、CCA1、CCA2依次增强。</li>
</ul>
<h4 id="CP-ABE具体构造"><a href="#CP-ABE具体构造" class="headerlink" title="CP-ABE具体构造"></a>CP-ABE具体构造</h4><h5 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a><strong>Setup</strong></h5><p>系统选择双线性群$\mathbb{G}_0$，阶数为$p$，生成元为$g$。然后随机选择两个指数$\alpha ,\beta \in \mathbb{Z}_p$，系统公开参数为：</p>
<script type="math/tex; mode=display">
PK=\left ( \mathbb{G}_0,g,h=g^\beta ,f=g^{1/\beta },e\left ( g,g \right )^\alpha  \right ).</script><p>主密钥为：$MK=\left ( \beta ,g^\alpha  \right )$。</p>
<h5 id="Encrypt-PK-M-mathcal-T"><a href="#Encrypt-PK-M-mathcal-T" class="headerlink" title="Encrypt($PK,M,\mathcal{T}$)"></a>Encrypt($PK,M,\mathcal{T}$)</h5><p>用访问控制树$\mathcal{T}$对消息$M$进行加密，具体过程如下：</p>
<p>针对树$\mathcal{T}$中的每一个节点$x$（包括联系属性的叶子节点），选择一个与之对应的多项式$q_x$。多项式$q_x$的的最高次数为$d_x=k_x-1$。</p>
<p>多项式的选取遵循由根节点到叶子节点（从上到下）的方式。从根节点$R$开始，选择秘密值$s \in \mathbb{Z}_p$，并设置$q_R \left(0 \right)=s$，然后随机选择其他项的次数。对于其他节点$x$，递归的设置$q_x \left( 0 \right) = q_{p\left(x \right)} \left(index\left(x \right) \right)$，至于$q_x$的其他系数随机选择。</p>
<p>记$Y$为树$\mathcal{T}$的叶子节点的集合，然后密文可以表示为：</p>
<script type="math/tex; mode=display">
CT=\left( \mathcal{T}, \widetilde{C}=Me\left ( g,g \right )^{\alpha s},C=h^s,\forall y \in Y:C_y=g^{q_y \left(0 \right )},
C_y^\prime=H \left(att \left(y \right) \right) ^ {q_y \left( 0  \right )} \right).</script><p>其中，$att \left(y \right)$表示的是叶子节点$y$对应的属性，$H \left( \cdot \right)$表示将属性映射到$\mathbb{G}_0$。</p>
<h5 id="KeyGen-MK-S"><a href="#KeyGen-MK-S" class="headerlink" title="KeyGen($MK,S$)"></a>KeyGen($MK,S$)</h5><p>给定一个用户的属性集合$S$，输出对应的密钥$SK$，具体如下：</p>
<p>随机选择$r \in \mathbb{Z}_p$，对于$\forall j \in S$， 随机选择$r_j \in \mathbb{Z}_p$，然后计算密钥如下：</p>
<script type="math/tex; mode=display">
SK=\left( D=g^{\left(\alpha +r \right)/\beta}, \forall j \in S: D_j=g^r\cdot H(j)^{r_j}, D_j^\prime=g^{r_j} \right).</script><h5 id="Delegate-SK-widetilde-S"><a href="#Delegate-SK-widetilde-S" class="headerlink" title="Delegate($SK,\widetilde{S}$)"></a>Delegate($SK,\widetilde{S}$)</h5><p>这个算法的作用是给属性比自己少的用户生成密钥（Delegate字面意思为委派，相当于自己得到密钥后，成了一个“小”的密钥产生中心（KGC）），具体过程如下：</p>
<p>给定另一个属性集合$\widetilde{S}$，满足$\widetilde{S} \subseteq S$。由于已经知道了$S$对应的密钥$SK=(D,\forall j \in S: D_j, D_j^\prime)$，则在此基础上随机选择$\widetilde{r} \in \mathbb{Z}_p$，对于$\forall k \in \widetilde{S}$， 随机选择$\widetilde{r}_k \in \mathbb{Z}_p$，产生$\widetilde{S}$对应的密钥如下：</p>
<script type="math/tex; mode=display">
\widetilde{SK}=(\widetilde{D}=Df^{\widetilde{r}},\forall k \in \widetilde{S}:
\widetilde{D}_k=D_kg^{\widetilde{r}}H(k)^{\widetilde{r}_k},\widetilde{D}_k^\prime=D_k^\prime g^{\widetilde{r}_k}).</script><h5 id="Decrypt-CT-SK"><a href="#Decrypt-CT-SK" class="headerlink" title="Decrypt($CT,SK$)"></a>Decrypt($CT,SK$)</h5><p>密文的形式为：</p>
<script type="math/tex; mode=display">
CT=\left( \mathcal{T}, \widetilde{C}=Me\left ( g,g \right )^{\alpha s},C=h^s,\forall y \in Y:C_y=g^{q_y \left(0 \right )},C_y^\prime=H \left(att \left(y \right) \right) ^ {q_y \left( 0  \right )} \right).</script><p>密钥的形式为：</p>
<script type="math/tex; mode=display">
SK=\left( D=g^{\left(\alpha +r \right)/\beta}, \forall j \in S: D_j=g^r\cdot H(j)^{r_j}, D_j^\prime=g^{r_j} \right).</script><p>首先定义一个递归的函数$DecryptNode(CT,SK,x)$（由下到上）:</p>
<ul>
<li><p>如果$x$为叶子节点，记$i=att(x)$。</p>
<ul>
<li><p>若$i \in S$（用户拥有属性$i$），则</p>
<script type="math/tex; mode=display">
DecryptNode(CT,SK,x) = \frac{e(D_i, C_x)}{e(D_i^\prime , C_x^ \prime)}= \frac{e(g^r \cdot H(x)^{r_i}, h^{q_x(0)})}{e(g^{r_i} , H(i)^{q_x(0)})} = e(g,g)^{rq_x(0)}.</script></li>
<li><p>若$i \notin S$，则定义$DecryptNode(CT,SK,x) =\perp $。</p>
</li>
</ul>
</li>
<li><p>如果$x$为非叶子节点，则$DecryptNode(CT,SK,x)$的计算规则如下：</p>
<ul>
<li><p>对于$x$节点的所有孩子节点$z$，调用$F_z = DecryptNode(CT,SK,z)$函数，记$F_z \neq \perp $的所有节点的集合为$S^ \prime$，若$|S^ \prime|&lt;k_x$，则$DecryptNode(CT,SK,x) =\perp $。</p>
</li>
<li><p>相反的话，则选取$S^ \prime$集合中任意$k_x$个元素组成集合$S_x$，按如下方式计算$DecryptNode(CT,SK,x)$：</p>
<script type="math/tex; mode=display">
\begin{aligned}
&F_z=\prod _{z \in S_x} F_z ^{\Delta _{i,S_x^ \prime} (0)} \nonumber \\
&=\prod _{z \in S_x} (e(g,g) ^ {rq_z(0)}) ^ {\Delta _{i,S_x^ \prime} (0)} \nonumber \\
&=\prod _{z \in S_x} (e(g,g) ^ {rq_{p(z)}(index(z))}) ^ {\Delta _{i,S_x^ \prime} (0)} \nonumber \\
&=\prod _{z \in S_x} (e(g,g)  ^ {r \cdot q_x(i) \cdot \Delta _{i,S_x^ \prime} (0)} \nonumber \\
&=e(g,g)^{rq_x(0)}.\nonumber
\end{aligned}</script></li>
</ul>
</li>
</ul>
<p>从递归函数的形式上看，尽管叶子节点和非叶子节点的具体计算方式不一样，但是有着统一的形式，因此只要能够依次满足条件地计算出树中适当个数的节点秘密值，就可以解密根节点的秘密值。即当属性集合$S$满足访问结构$\mathcal{T}$，那么就可以解密得到:</p>
<script type="math/tex; mode=display">
A = DecryptNode(CT,SK,r)=e(g,g)^{rq_R(0)} = e(g,g)^{rs}.</script><p>最后即可解密成功：</p>
<script type="math/tex; mode=display">
\widetilde{C}/(e(C,D)/A) = \widetilde{C}/(e(h^s,g^{((\alpha + r)/\beta )})/e(g,g)^{rs}) = M.</script><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>以上便是最初的CP-ABE方案的构造，访问结构由访问控制树的形式给出，方案中除了基本的系统初始化、密钥生成、加密和解密四个步骤外，还有一个密钥“委派”的步骤，这个可能是受分层身份基加密（HIBE)的影响。文中抵抗共谋攻击的方式是靠随机数$r$，对于每一个用户都会有一个不同的$r$，从递归函数$DecryptNode$可以看出每一步计算都有$r$项参与，如果没有足够多的项是无法解密根节点的秘密值，进而无法解密密文，而不同的$r$得到的结果不能进行拉格朗日插值，算出结果。以后的ABE方案侧重于用户撤销、属性撤销、多个属性权威等等安全需求，这些在之后的文章中有介绍。</p>
<p><span name="ref1">V. Goyal, O. Pandey, A. Sahai, and B. Waters, “Attribute-Based Encryption for Fine-grained Access Control of Encrypted Data,” in <em>Proceedings of the 13th ACM Conference on Computer and Communications Security</em>, Alexandria, Virginia, USA, 2006, pp. 89–98.</span></p>
<p><span name="ref2">J. Bethencourt, A. Sahai, and B. Waters, “Ciphertext-Policy Attribute-Based Encryption,” in <em>IEEE Symposium on Security &amp; Privacy</em>, Oakland, USA, May 2007, pp. 321–334.</span></p>
]]></content>
      <categories>
        <category>属性基加密</category>
      </categories>
      <tags>
        <tag>属性基加密</tag>
        <tag>访问结构</tag>
      </tags>
  </entry>
  <entry>
    <title>模糊身份基加密</title>
    <url>/2021/04/08/%E6%A8%A1%E7%B3%8A%E8%BA%AB%E4%BB%BD%E5%9F%BA%E5%8A%A0%E5%AF%86/</url>
    <content><![CDATA[<h4 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h4><p>属性基加密<sup><a href="ref1">1</a></sup> （ABE）的思想来源于模糊身份基加密<sup><a href="ref2">2</a></sup> （FIBE），那么在深入了解属性基加密之前，我们先来认识一下模糊身份基加密。模糊身份基加密的主要思想是：用户用一系列的属性$\omega $表示，密文用一系列的属性${\omega }’$表示，系统设定一个容忍值$d$，当二者属性的相交个数大于$d$，即$|{\omega }’\cap \omega|\geq d$时，方能解密成功。</p>
<span id="more"></span>
<h4 id="双线性映射"><a href="#双线性映射" class="headerlink" title="双线性映射"></a>双线性映射</h4><p>双线性映射是基于Diffie-Hellman难题构建属性基加密算法的数学基础，此处的模糊身份基加密也用到了该数学基础。</p>
<p>令$\mathbb{G}_1,\mathbb{G}_2$为两个阶为$p$的乘法循环群，$g$为$\mathbb{G}_1$的生成元，一个从$\mathbb{G}_1$到$\mathbb{G}_2$的映射$e:\mathbb{G}_1 \times \mathbb{G}_1\rightarrow  \mathbb{G}_2$是双线性的，当其满足以下三点：</p>
<ul>
<li>双线性：$\forall g, h \in \mathbb{G}_1$和$a,b \in \mathbb{Z}_p$有$e\left ( g^a, h^b \right ) = e\left ( g, h \right )^{ab}$；</li>
<li>非退化性：$e\left ( g, h \right ) \neq 1$；</li>
<li>可计算性：$\forall g, h \in \mathbb{G}_1$，存在有效的算法计算$e\left ( g, h \right ) \in \mathbb{G}_2$。</li>
</ul>
<h4 id="FIBE具体构造"><a href="#FIBE具体构造" class="headerlink" title="FIBE具体构造"></a>FIBE具体构造</h4><h5 id="Set-up"><a href="#Set-up" class="headerlink" title="Set up"></a>Set up</h5><p>首先定义系统的属性空间$U$，为了简单起见，将$\mathbb{Z}_p$中前$|U|$个元素作为属性即整数1,…,$|U|$。然后在$\mathbb{Z}_p$中随机均匀选择$t_1,…,t_{|U|}$。最后在$\mathbb{Z}_p$中随机均匀选择$y$。系统的公共参数表示为：</p>
<script type="math/tex; mode=display">
T_1=g^{t_1},...,g^{t_{|U|}},Y=e\left ( g,g \right )^y.</script><p>系统的主密钥为：</p>
<script type="math/tex; mode=display">
t_1,...t_{|U|},y.</script><h5 id="Key-Generation"><a href="#Key-Generation" class="headerlink" title="Key Generation"></a>Key Generation</h5><p>对于某个用户身份$\omega  \in U$（属性集合），选择一个$d-1$阶多项式$q$，使得$q\left ( 0 \right )=y$。私钥部件为$\left ( D_i \right )_{i \in \omega}$，其中$D_i = g^{\frac{q\left ( i \right )}{t_i}}$。</p>
<h5 id="Encryption"><a href="#Encryption" class="headerlink" title="Encryption"></a>Encryption</h5><p>密文的加密与一系列的属性${\omega}’$有关，将发送的消息映射到$\mathbb{G}_2$上，即$M \in \mathbb{G}_2$。然后随机选择一个$\mathbb{Z}_p$上的秘密值$s$，加密得到的密文形式如下：</p>
<script type="math/tex; mode=display">
E=\left ( {\omega}',{E}'=MY^s,\left \{ E_i =T_i^s\right \}_{i \in {\omega}'} \right ).</script><h5 id="Decryption"><a href="#Decryption" class="headerlink" title="Decryption"></a>Decryption</h5><p>假设用户的属性集合与蕴含在密文中的属性集合相交的属性个数多于$d$，即$|{\omega }’\cap \omega|\geq d$，那么他能按照如下方式成功解密。首先在属性交集${\omega }’\cap \omega$中任意选择$d$个属性集合$S$，然后根据拉格朗日插值算法，可以解密密文：</p>
<script type="math/tex; mode=display">
\begin {aligned}
&{E}'/\prod _{i \in S}\left ( e\left ( D_i,E_i \right ) \right )^{\Delta_{i,S}\left ( 0 \right )} \nonumber \\
&=Me\left ( g,g \right )^{sy}/ \prod _{i \in S}\left ( e\left ( g^{\frac{q\left ( i \right )}{t_i}},g^{st_i} \right ) \right )^{\Delta_{i,S}\left ( 0 \right )} \nonumber \\
&=Me\left ( g,g \right )^{sy}/ \prod _{i \in S}\left ( e\left ( g,g \right )^{sq\left ( i \right )} \right )^{\Delta_{i,S}\left ( 0 \right )} \nonumber \\
&=M \nonumber
\end {aligned}</script><p>其中$\Delta_{i,S}\left ( 0 \right )$为拉格朗日系数的0值，$\Delta_{i,S}\left ( x \right ) = \prod _{j \in S,j\neq i}\frac{x-j}{i-j}$。</p>
<h4 id="安全性证明"><a href="#安全性证明" class="headerlink" title="安全性证明"></a>安全性证明</h4><p>密码学中构建方案，通常将方案的安全性规约到某个数学困难问题，用反证法的思想，当难题是困难的，那么攻破方案就是困难的。FIBE方案是在选择身份模型下将方案规约到MBDH问题。以下描述模糊选择身份模型（Selective-ID模型，属性基加密中为Selective-Set模型）：</p>
<p><strong>Init</strong> 攻击者声明想要挑战的身份$\alpha $（即一个属性集合）。</p>
<p><strong>Setup</strong> 挑战者运行系统的Setup算法生成系统参数，将公共参数告诉攻击者。</p>
<p><strong>Phase 1</strong> 攻击者可以对许多身份$\gamma _j$进行密钥询问，前提是$\forall j$，$|\gamma _j \cap \alpha |&lt;d$。</p>
<p><strong>Challenge</strong>  攻击者提交两个等长的密文$M_0,M_1$，挑战者抛掷一枚硬币$b \in \left \{ 0,1 \right \}$，然后用$\alpha $加密$M_b$。挑战者将密文发送给攻击者。</p>
<p><strong>Phase 2</strong> Phase 1过程重复。</p>
<p><strong>Guess</strong> 攻击者给出$b$的猜想${b}’$。</p>
<p>以上游戏中攻击者的优势定义为$Pr\left [ {b}’=b \right ]-\frac{1}{2}$。</p>
<p>以后会发现证明安全性的时候，以上攻击者和挑战者的游戏经常看到。在这里就不细讲证明的过程，后面会专门写一篇文章介绍方案的安全性证明。从FIBE的构造来看，主要运用的数学技巧是双线性映射和拉格朗日插值。这两个数学技巧是构建属性基加密方案的基础，FIBE只是用了一次插值，而前面介绍的访问控制树结构本质上是多次运用拉格朗日插值，然后构造成一个访问结构供方案使用，还有一些分层的FIBE（可以理解为分层的门限属性基加密），也是多次运用拉格朗日插值，比如文献<sup><a href="ref3">3</a></sup> 等。</p>
<p><span name="ref1">J. Bethencourt, A. Sahai, and B. Waters, “Ciphertext-Policy Attribute-Based Encryption,” in <em>IEEE Symposium on Security &amp; Privacy</em>, Oakland, USA, May 2007, pp. 321–334.</span></p>
<p><span name="ref2">A. Sahai and B. Waters, “Fuzzy Identity-Based Encryption,” in <em>Proceedings of the 24th annual international conference on Theory and Applications of Cryptographic Techniques</em>, Arahus, Denmark, 2005, pp. 457–473.</span></p>
<p><span name="ref3">M. Chase, “Multi-Authority Attribute Based Encryption,” in <em>Proceedings of 4th Theory of Cryptography Conference on Theory of Cryptography (TCC’07)</em>, 2007, pp. 515-534.</span></p>
]]></content>
      <categories>
        <category>属性基加密</category>
        <category>身份基加密</category>
      </categories>
      <tags>
        <tag>属性基加密</tag>
        <tag>访问结构</tag>
      </tags>
  </entry>
  <entry>
    <title>访问结构</title>
    <url>/2021/04/07/%E8%AE%BF%E9%97%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<p>属性基加密算法（Attribute Based Encryption）是一种特殊的身份及加密算法，身份及加密算法将任何能唯一代表用户身份的信息作为公钥，这样一来大大降低了公钥管理的难度，而属性基加密将用户的身份表示为一系列的属性的集合，当且仅当属性集合满足访问结构时，才能解密成功。<br><span id="more"></span></p>
<p>2005年，A. Sahai和 B. Waters两位大佬提出模糊身份基加密<sup><a href="ref1">1</a></sup> （FIBE）的概念，并在论文的后面引入属性基加密；2006年，J. Bethencourt、 A. Sahai  和 B. Waters这三位大佬首次构建属性基加密方案<sup><a href="ref2">2</a></sup>（确切的来说是密钥策略属性基加密方案，KP-ABE），并在论文后面引入密文策略属性基加密方案；2007年，V. Goyal、 O. Pandey、 A. Sahai 和 B. Waters这四位大佬首次构建密文策略属性基加密方案<sup><a href="ref3">3</a></sup>，从此属性加秘密的研究拉开序幕。</p>
<p>属性集合好理解，也就是将用户用一系列的属性标签表示，那么访问结构到底是什么呢？在描述访问结构之前，首先介绍一下离散对数难题（Discrete Logarithm Problem）、拉格朗日插值算法和单调访问结构（Monotone Access Structure），然后引出属性基加密方案中常用的三种访问结构：与门访问结构（And-Gate），访问控制树（Access Tree）和线性秘密共享（LSSS）。</p>
<h4 id="离散对数难题4"><a href="#离散对数难题4" class="headerlink" title="离散对数难题4"></a>离散对数难题<sup><a href="ref4">4</a></sup></h4><p>令$\alpha \in \mathbb{Z}_{p}$，$G$为一个乘法循环群，群的阶数为$p$，群的一个生成元为$g$，离散对数难题说的是：给定$g,g^a \in G$，对于任何多项式时间的攻击者，其计算出指数$a$的概率是可忽略的，即由$g,g^a \in G$计算出$a$是困难的。</p>
<h4 id="拉格朗日插值算法"><a href="#拉格朗日插值算法" class="headerlink" title="拉格朗日插值算法"></a>拉格朗日插值算法</h4><p>任意给定$k$阶多项式函数，已知给定$k+1$个取值点（互不重复）：$\left ( x_0,y_0 \right ),\left ( x_1,y_1 \right ),…,\left ( x_k,y_k \right )$，其中$i \neq  j$时$x_i \neq  x_j$。可以通过以下插值方式恢复多项式：</p>
<script type="math/tex; mode=display">
L\left ( x \right )=\sum _{j=0}^{k}y_jl_j\left ( x \right )</script><p>其中$l_j\left ( x \right )$为拉格朗日系数：</p>
<script type="math/tex; mode=display">
l_j\left ( x \right )=\prod _{i=0,i\neq j}^k \frac{x-x_i}{x_j-x_i}= \frac{x-x_0}{x_j-x_0}...\frac{x-x_{j-1}}{x_j-x_{j-1}}\cdot \frac{x-x_{j+1}}{x_j-x_{j+1}}...\frac{x-x_k}{x_j-x_k}</script><p>任意多于$k+1$个取值点都能复原多项式。</p>
<h4 id="单调访问结构5"><a href="#单调访问结构5" class="headerlink" title="单调访问结构5"></a>单调访问结构<sup><a href="ref5">5</a></sup></h4><p>令$\left \{ P_1,P_2,…,P_n \right \}$为一系列参与者的集合（属性基加密里边指的是属性），一个集合$ \mathbb{A} \subseteq 2^ { \left  \{ P_1,P_2,…,P_n \right \}} $是单调的，当其满足：$\forall B,C$，如果$B\in \mathbb{A}$且$B\subseteq C$，则$C\in \mathbb{A}$。一个访问结构（单调访问结构）是$\left \{ P_1,P_2,…,P_n \right \}$的幂集的非空子集，即$ \mathbb{A} \subseteq 2^ { \left  \{ P_1,P_2,…,P_n \right \} \setminus \left  \{\varnothing \right \}} $，在$\mathbb{A}$中的集合为授权集合，不在$\mathbb{A}$的集合为非授权集合。</p>
<h4 id="与门访问结构6"><a href="#与门访问结构6" class="headerlink" title="与门访问结构6"></a>与门访问结构<sup><a href="ref6">6</a></sup></h4><p>给定一个属性域$U=\left \{ 1,2,…,n \right \}$，对于该属性域中的每一个属性$\underline{i}\in U$，有三个值可供选择：</p>
<p>$\underline{i}=+i$表示该属性有，$\underline{i}=-i$表示该属性没有，而$\underline{i}=dont care$表示该属性可有可无。访问结构可以表示为与门访问结构$W=\wedge _{i\in I}\underline{i}$，其中$I\subseteq U$表示设置的与访问结构有关的属性集合，因此对于$\underline{i}\in U \setminus I$，其属性都为$\underline{i}=dont care$。</p>
<h4 id="访问控制树2"><a href="#访问控制树2" class="headerlink" title="访问控制树2"></a>访问控制树<sup><a href="ref2">2</a></sup></h4><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p>让$\mathcal{T}$表示一个访问控制树。树的非叶子节点$x$表示一个门限，记$k_x$为节点$x$的门限值，$num_x$为节点$x$的孩子节点总数，那么自然有$0&lt;k_x&lt;num_x$。当$k_x=1$时，即表示或门，当$k_x=num_x$时，即表示与门。树的叶子节点$x$与一个属性相联系，自然地，此时$k_x=1$。</p>
<p>为了表示的方便，定义一些描述节点的函数。记$p\left ( x \right )$表示节点$x$的父亲节点，$index\left ( x \right )$表示在父亲节点看来该节点的索引值（像完全二叉树一样自左向右编号）。如果$x$是一个叶子节点，$attr\left ( x \right )$表示该节点关联的属性值。</p>
<h5 id="满足一个访问控制树"><a href="#满足一个访问控制树" class="headerlink" title="满足一个访问控制树"></a>满足一个访问控制树</h5><p>让$\mathcal{T}$表示一个访问控制树，根节点为$r$。记$\mathcal{T}_x$为根节点为$x$的$\mathcal{T}$（$\mathcal{T}$就可以表示为$\mathcal{T}_r$）的子树。如果属性集合$\gamma$满足访问控制树$\mathcal{T}_x$，则$\mathcal{T}_x\left ( \gamma \right )=1$。$\mathcal{T}_x\left ( \gamma \right )$按如下的方式递归计算：如果$x$为非叶子节点，则计算$x$节点的所有孩子节点${x}’$的$\mathcal{T}_{x}’\left ( \gamma \right )$的值，$\mathcal{T}_x\left ( \gamma \right )=1$当且仅当至少$k_x$个$\mathcal{T}_{x}’\left ( \gamma \right )$返回1。如果$x$为叶子节点，则$\mathcal{T}_x\left ( \gamma \right )=1$当且仅当$attr\left ( x \right ) \in \gamma$。</p>
<h5 id="访问控制树的定义"><a href="#访问控制树的定义" class="headerlink" title="访问控制树的定义"></a>访问控制树的定义</h5><p>对于每一个树中的节点$x$，选择与之对应的多项式$q_x$，多项式的选择遵循自上而下的方式（从根节点到叶子节点），具体如下：</p>
<ul>
<li>对于树中的节点$x$，将多项式$q_x$的最高次数设置为$d_x=k_x-1$，也即该节点门限值减一；</li>
<li>对于根节点$r$，设置$q_r\left ( 0 \right )=y$ ，至于$q_r$的其他系数随机选择；</li>
<li>对于树中的节点$x$，设置$q_x\left ( 0 \right )=q_{p\left(x\right)}\left ( index\left(x\right) \right )$ ，至于$q_x$的其他系数随机选择；</li>
<li>构造属性基加密算法的时候，将叶子节点$z$的值$q_z\left ( 0 \right )$作为属性密钥的有关部件，这样通过拉格朗日插值算法就可以恢复出秘密值（与$y$有关的值）。</li>
</ul>
<h4 id="线性秘密共享5"><a href="#线性秘密共享5" class="headerlink" title="线性秘密共享5"></a>线性秘密共享<sup><a href="ref5">5</a></sup></h4><p>令$\mathbb{P}=\left \{ P_1,P_2,…,P_n \right \}$为一系列参与者的集合，$\mathbb{P}$上的一个秘密共享方案$\prod $是线性的，当且仅当满足如下两个条件：</p>
<ul>
<li>每个参与者关于秘密值$s$的份额构成$\mathbb{Z}_{p}$上的一给向量；</li>
<li>存在一个秘密共享方案$\prod $的分享生成矩阵$M \in \mathbb{Z}_{p} ^ {l \times \theta}$，函数$\rho \left ( i \right )$将矩阵的第$i$行映射到一个$U$上的属性，即$\rho \left ( i \right ) \in U, \forall i \in \left [ l \right ]$。给定一个列向量$\overrightarrow{v}=\left ( s,r_2,…,r_{\theta} \right )$，其中$s \in \mathbb{Z}_{p}$是需要共享的秘密值，$r_2,…,r_{\theta}$在$\mathbb{Z}_{p}$上随机选取。$M\overrightarrow{v}$向量是根据秘密共享方案$\prod $的$l$份份额，第$i$份份额$\delta _i = \left ( Mv \right )_i$是属于属性$\rho \left ( i \right )$，即为$M$和$\overrightarrow{v}$的内积。</li>
</ul>
<p>线性秘密共享方案具有线性重构的特性。假设一个线性秘密共享方案$\prod $代表一个访问结构，令$A \in \mathbb{A} $表示一个授权的属性集合，索引集合$I \subset  \left \{ 1,…,l \right \}$定义为$I=\left \{ i:\rho \left ( i \right ) \in A \right \}$。根据线性重构的性质，则存在一系列常数的集合$\left \{ \omega_i \in \mathbb{Z}_p  \right \}_{i \in I}$，使得$s=\sum _{i \in I} \omega _i\delta _i$。而且这些常数能在多项式时间内找到。对于任何非授权的集合，找不到满足条件的一组常数。</p>
<h4 id="三种访问结构对比"><a href="#三种访问结构对比" class="headerlink" title="三种访问结构对比"></a>三种访问结构对比</h4><p>从访问结构的表达力上说，与门访问结构是比较差的，因为其是属性的与的关系，所以匹配的条件比较严格，由最初的二值属性（有或者没有）在一定程度上拓展了其表达力。访问控制树和线性秘密共享方案是可以等价的，描述的都是单调的访问结构（单调访问结构直观上理解就是，a的属性集合满足访问结构，而a有的属性b都有，那么b的属性集合必然也满足访问结构），能支持与门、或门以及其他门限，因此表达力强一些。文献<sup><a href="ref7">7</a></sup> 描述了由访问控制树如何转化为线性秘密共享的生成矩阵（只含有0,1和-1）。</p>
<p><span name="ref1">A. Sahai and B. Waters, “Fuzzy Identity-Based Encryption,” in <em>Proceedings of the 24th annual international conference on Theory and Applications of Cryptographic Techniques</em>, Arahus, Denmark, 2005, pp. 457–473.</span></p>
<p><span name="ref2">J. Bethencourt, A. Sahai, and B. Waters, “Ciphertext-Policy Attribute-Based Encryption,” in <em>IEEE Symposium on Security &amp; Privacy</em>, Oakland, USA, May 2007, pp. 321–334.</span></p>
<p><span name="ref3">V. Goyal, O. Pandey, A. Sahai, and B. Waters, “Attribute-Based Encryption for Fine-grained Access Control of Encrypted Data,” in <em>Proceedings of the 13th ACM Conference on Computer and Communications Security</em>, Alexandria, Virginia, USA, 2006, pp. 89–98.</span></p>
<p><span name="ref4">H. H. Krawczyk, “A high-performance secure Diffie–Hellman protocol,” in <em>Advances in Cryptology</em>. Berlin, Germany: Springer, 2005, pp. 1–62.</span></p>
<p><span name="ref5">A. Beimel, “Secure Schemes for Secret Sharing and Key Distribution,”PhD thesis, Israel Institute of Technology, Technion, Haifa, Israel, 1996.</span></p>
<p><span name="ref6">L. Cheung and C. Newport, “Provably Secure Ciphertext Policy ABE,” in <em>Proceedings of ACM Conference on Computer and Commmunications Security</em>, pp. 456-465, 2007.</span></p>
<p><span name="ref7">S. Ruj, A. Nayak and I. Stojmenovic, “DACC: Distributed Access Control in Clouds,” in <em>2011IEEE 10th International Conference on Trust, Security and Privacy in Computing and Communications</em>, Changsha, 2011, pp. 91-98.</span></p>
]]></content>
      <categories>
        <category>属性基加密</category>
      </categories>
      <tags>
        <tag>属性基加密</tag>
        <tag>访问结构</tag>
      </tags>
  </entry>
  <entry>
    <title>雾计算与属性基加密</title>
    <url>/2021/04/05/%E9%9B%BE%E8%AE%A1%E7%AE%97%E4%B8%8E%E5%B1%9E%E6%80%A7%E5%9F%BA%E5%8A%A0%E5%AF%86/</url>
    <content><![CDATA[<h4 id="雾计算的概念"><a href="#雾计算的概念" class="headerlink" title="雾计算的概念"></a>雾计算的概念</h4><p>雾计算与云计算相对，是其在边缘网络上的拓展。</p>
<h4 id="云计算与雾计算的对比"><a href="#云计算与雾计算的对比" class="headerlink" title="云计算与雾计算的对比"></a>云计算与雾计算的对比</h4><p>云计算可以资源共享、弹性资源租用、按需购买，拥有海量存储和丰富的计算能力。由于其部署在互联网的中心，因此离日常中的终端（比如用户手机、智能穿戴设备等）较远，因此形象地称之为云计算（云高高在上，离地面较远）。<br><span id="more"></span><br>云计算虽能提供优质的计算、存储等服务，但网络边缘的数据传到云存储中心的链路通常很长，并且同一时间内用户数据传输很多需要很大的网络带宽。云服务器与终端较远会导致网络时延，因而不能满足实时性要求很高的应用场景。另外，云服务器是在网络中心，并不能感知传输到它的数据来源的地理分布，而且不支持移动性。</p>
<h4 id="雾计算的特点"><a href="#雾计算的特点" class="headerlink" title="雾计算的特点"></a>雾计算的特点</h4><p>针对上面的缺陷，雾计算便被提出。与云计算相比，雾计算有以下特点：</p>
<ul>
<li>位置感知、低延时。雾计算框架中的雾节点往往分布在边缘位置，能感知其所在范围内设备的位置，而且雾节点与终端设备的通信时延相比设备与云服务器的时延大大缩减，因而可以支持延时需求高的应用场景。</li>
<li>广泛地理分布。与中心化的云形成鲜明的对比，雾节点会根据连接网络中各个终端设备的地理分布，相应地广泛分布。</li>
<li>大规模终端节点。接入网络的终端设备除了像用户手机之类的智能设备外，还有各种各样的传感器，监测湿度、温度等多种物理量，这些设备呈现出低存储、低计算能力的特点，构成分布式的系统。由此整个网络中节点的规模空前巨大。</li>
<li>实时交互和无线接入。终端和雾节点的通信延时极低确保能实时交互，这能满足时延要求高的应用场景，比如自动驾驶等。终端和雾节点之间通过无线连接。</li>
<li>异质性和互操作性。雾节点可以以不同的形式呈现，应用于不同的环境。来自于终端的信息往往需要整合处理，因此需要跨域操作，节点间需要合作。</li>
<li>在线分析和云雾协作。雾节点能对来自终端的数据进行在线分析，并且可以和云数据中心进行交互。</li>
</ul>
<h4 id="云计算的应用场景"><a href="#云计算的应用场景" class="headerlink" title="云计算的应用场景"></a>云计算的应用场景</h4><ul>
<li>车联网。智能交通灯等智能设备监测交通实时状况，实现车辆与车辆、车辆与接入点、接入点与接入点之间的实时交互。</li>
<li>智能电网。在智能电网中，能量负载均衡应用可以在网络边缘设备上运行，基于能量需求，可用性和最低价格等因素可以自动地切换到像太阳能、风能 等可选择的能源。网络边缘的雾收集器处理智能传感器和设备生成的数据，并且向制动器发出控制命令。它们还要过滤在本地处理的数据，并将剩余的数据发送到更高层，用于可视化和实时事务分析的报告。</li>
<li>无线传感器和致动网络。雾设备制动器（雾计算服务器）可以通过创建闭环系统来控制系统，并且测量过程的稳定性和振荡行为。以此来弥补传统传感器需要额外施加物理动作实现相应功能打开。关闭等要求。</li>
<li>智能家居。各类传感器实时监测环境中的物理量，收集的数据交由雾节点协作处理，从而传递给系统进行智能决策。雾节点之间也可以协作，为更高级别的决策生成依据。</li>
</ul>
<h4 id="雾计算网络框架"><a href="#雾计算网络框架" class="headerlink" title="雾计算网络框架"></a>雾计算网络框架</h4><p>雾计算的网络框架是三层框架，第一层是智能终端层，该层可以是移动手机、各类传感器等，特点是存储。计算资源受限；第二层是雾计算节点层，该层具有适度的计算和存储资源；第三层是云数据中心，这一层具有海量存储和超强的计算能力。三层的位置关系为：第一层和第二层靠的近，第三层与第二层靠的很远。</p>
<h4 id="雾计算中的研究问题"><a href="#雾计算中的研究问题" class="headerlink" title="雾计算中的研究问题"></a>雾计算中的研究问题</h4><ul>
<li>计算卸载。计算卸载可以克服移动设备上的资源限制，因为一些计算密集型任务就应用的性 能而言可以从卸载中获益，从而节省计算资源和电池寿命。计算卸载考虑的是终端的计算资源受限，可以将复杂的计算卸载到雾节点服务器以及云服务器，但是如何运用好的卸载策略需要考虑计算能量、计算代价以及计算时延等。</li>
<li>边缘缓存。边缘缓存指的是将需要频繁访问的网络内容放在离用户较近、访问速度较快的 边缘网络设备中（也即雾设备）。边缘缓存技术的提出明显缓解了用户频繁请求云服务中心获取文件的压力。边缘缓存通常包含两个紧密相关的问题：缓存文件位置和缓存文件传递。文件缓存位置问题包括决定每一个缓存的位置和大小，选择数据库中的某一个文件放在某一个雾节点，并且如何下载文件到雾节点。缓存文件传递问题是如何发送文件给请求该文件的用户。边缘缓存考虑的是终端的存储资源受限，制定合理的边缘缓存策略使得终端可以迅速下载雾中数据，便于数据后续处理。</li>
</ul>
<h4 id="雾计算与属性基加密的关系"><a href="#雾计算与属性基加密的关系" class="headerlink" title="雾计算与属性基加密的关系"></a>雾计算与属性基加密的关系</h4><p>智能设备由于其存储和计算资源的局限性，总会想方设法解决对自己所有（或者所产生）数据的存储计算问题，并且希望访问控制的主动权掌握在自己手里。自然想到的解决办法是将将数据外包。和云计算类似，只不过雾计算在框架上增加了一个层次，即在网络的边缘增加大量的雾节点。云计算中，属性基加密方法是一个有前途的密码方案，可以提供细粒度的访问控制，终端自定义访问结构，终端将数据加密上传到云存储，其他用户只要满足访问结构便可以从云上下载并解密密文。在雾计算中，数据外包同样可以运用属性基加密的方式，提供细粒度的访问控制。只不过在雾计算中，终端设备可以将数据上传到雾节点或者云服务器，雾节点和云服务器可以进行服务上的交互。上传到雾中的数据可以直接被雾覆盖的其他终端或者用户所下载，相当于一个局部的概念；而上传到云中的数据可以被所有网络中的用户或者终端下载，相当于一个全局的概念。属性基加密运用到云计算上解决的问题，同样可以运用到雾计算中。</p>
]]></content>
      <categories>
        <category>属性基加密</category>
      </categories>
      <tags>
        <tag>属性基加密</tag>
        <tag>雾计算</tag>
      </tags>
  </entry>
</search>
