<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2021/04/04/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>雾计算与属性基加密</title>
    <url>/2021/04/05/%E9%9B%BE%E8%AE%A1%E7%AE%97%E4%B8%8E%E5%B1%9E%E6%80%A7%E5%9F%BA%E5%8A%A0%E5%AF%86/</url>
    <content><![CDATA[<h2 id="雾计算的概念"><a href="#雾计算的概念" class="headerlink" title="雾计算的概念"></a>雾计算的概念</h2><p>雾计算与云计算相对，是其在边缘网络上的拓展。</p>
<h2 id="云计算与雾计算的对比"><a href="#云计算与雾计算的对比" class="headerlink" title="云计算与雾计算的对比"></a>云计算与雾计算的对比</h2><p>云计算可以资源共享、弹性资源租用、按需购买，拥有海量存储和丰富的计算能力。由于其部署在互联网的中心，因此离日常中的终端（比如用户手机、智能穿戴设备等）较远，因此形象地称之为云计算（云高高在上，离地面较远）。<br>云计算虽能提供优质的计算、存储等服务，但网络边缘的数据传到云存储中心的链路通常很长，并且同一时间内用户数据传输很多需要很大的网络带宽。云服务器与终端较远会导致网络时延，因而不能满足实时性要求很高的应用场景。另外，云服务器是在网络中心，并不能感知传输到它的数据来源的地理分布，而且不支持移动性。</p>
<h2 id="雾计算的特点"><a href="#雾计算的特点" class="headerlink" title="雾计算的特点"></a>雾计算的特点</h2><p>针对上面的缺陷，雾计算便被提出。与云计算相比，雾计算有以下特点：</p>
<ul>
<li>位置感知、低延时。雾计算框架中的雾节点往往分布在边缘位置，能感知其所在范围内设备的位置，而且雾节点与终端设备的通信时延相比设备与云服务器的时延大大缩减，因而可以支持延时需求高的应用场景。</li>
<li>广泛地理分布。与中心化的云形成鲜明的对比，雾节点会根据连接网络中各个终端设备的地理分布，相应地广泛分布。</li>
<li>大规模终端节点。接入网络的终端设备除了像用户手机之类的智能设备外，还有各种各样的传感器，监测湿度、温度等多种物理量，这些设备呈现出低存储、低计算能力的特点，构成分布式的系统。由此整个网络中节点的规模空前巨大。</li>
<li>实时交互和无线接入。终端和雾节点的通信延时极低确保能实时交互，这能满足时延要求高的应用场景，比如自动驾驶等。终端和雾节点之间通过无线连接。</li>
<li>异质性和互操作性。雾节点可以以不同的形式呈现，应用于不同的环境。来自于终端的信息往往需要整合处理，因此需要跨域操作，节点间需要合作。</li>
<li>在线分析和云雾协作。雾节点能对来自终端的数据进行在线分析，并且可以和云数据中心进行交互。<h2 id="云计算的应用场景"><a href="#云计算的应用场景" class="headerlink" title="云计算的应用场景"></a>云计算的应用场景</h2></li>
<li>车联网。智能交通灯等智能设备监测交通实时状况，实现车辆与车辆、车辆与接入点、接入点与接入点之间的实时交互。</li>
<li>智能电网。在智能电网中，能量负载均衡应用可以在网络边缘设备上运行，基于能量需求，可用性和最低价格等因素可以自动地切换到像太阳能、风能 等可选择的能源。网络边缘的雾收集器处理智能传感器和设备生成的数据，并且向制动器发出控制命令。它们还要过滤在本地处理的数据，并将剩余的数据发送到更高层，用于可视化和实时事务分析的报告。</li>
<li>无线传感器和致动网络。雾设备制动器（雾计算服务器）可以通过创建闭环系统来控制系统，并且测量过程的稳定性和振荡行为。以此来弥补传统传感器需要额外施加物理动作实现相应功能打开。关闭等要求。</li>
<li>智能家居。各类传感器实时监测环境中的物理量，收集的数据交由雾节点协作处理，从而传递给系统进行智能决策。雾节点之间也可以协作，为更高级别的决策生成依据。<h2 id="雾计算网络框架"><a href="#雾计算网络框架" class="headerlink" title="雾计算网络框架"></a>雾计算网络框架</h2>雾计算的网络框架是三层框架，第一层是智能终端层，该层可以是移动手机、各类传感器等，特点是存储。计算资源受限；第二层是雾计算节点层，该层具有适度的计算和存储资源；第三层是云数据中心，这一层具有海量存储和超强的计算能力。三层的位置关系为：第一层和第二层靠的近，第三层与第二层靠的很远。<h2 id="雾计算中的研究问题"><a href="#雾计算中的研究问题" class="headerlink" title="雾计算中的研究问题"></a>雾计算中的研究问题</h2></li>
<li>计算卸载。计算卸载可以克服移动设备上的资源限制，因为一些计算密集型任务就应用的性 能而言可以从卸载中获益，从而节省计算资源和电池寿命。计算卸载考虑的是终端的计算资源受限，可以将复杂的计算卸载到雾节点服务器以及云服务器，但是如何运用好的卸载策略需要考虑计算能量、计算代价以及计算时延等。</li>
<li>边缘缓存。边缘缓存指的是将需要频繁访问的网络内容放在离用户较近、访问速度较快的 边缘网络设备中（也即雾设备）。边缘缓存技术的提出明显缓解了用户频繁请求云服务中心获取文件的压力。边缘缓存通常包含两个紧密相关的问题：缓存文件位置和缓存文件传递。文件缓存位置问题包括决定每一个缓存的位置和大小，选择数据库中的某一个文件放在某一个雾节点，并且如何下载文件到雾节点。缓存文件传递问题是如何发送文件给请求该文件的用户。边缘缓存考虑的是终端的存储资源受限，制定合理的边缘缓存策略使得终端可以迅速下载雾中数据，便于数据后续处理。<h2 id="雾计算与属性基加密的关系"><a href="#雾计算与属性基加密的关系" class="headerlink" title="雾计算与属性基加密的关系"></a>雾计算与属性基加密的关系</h2>智能设备由于其存储和计算资源的局限性，总会想方设法解决对自己所有（或者所产生）数据的存储计算问题，并且希望访问控制的主动权掌握在自己手里。自然想到的解决办法是将将数据外包。和云计算类似，只不过雾计算在框架上增加了一个层次，即在网络的边缘增加大量的雾节点。云计算中，属性基加密方法是一个有前途的密码方案，可以提供细粒度的访问控制，终端自定义访问结构，终端将数据加密上传到云存储，其他用户只要满足访问结构便可以从云上下载并解密密文。在雾计算中，数据外包同样可以运用属性基加密的方式，提供细粒度的访问控制。只不过在雾计算中，终端设备可以将数据上传到雾节点或者云服务器，雾节点和云服务器可以进行服务上的交互。上传到雾中的数据可以直接被雾覆盖的其他终端或者用户所下载，相当于一个局部的概念；而上传到云中的数据可以被所有网络中的用户或者终端下载，相当于一个全局的概念。属性基加密运用到云计算上解决的问题，同样可以运用到雾计算中。</li>
</ul>
]]></content>
      <categories>
        <category>属性基加密</category>
      </categories>
      <tags>
        <tag>雾计算</tag>
        <tag>属性基加密</tag>
      </tags>
  </entry>
</search>
